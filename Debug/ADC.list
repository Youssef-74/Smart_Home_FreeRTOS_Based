
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007448  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08007558  08007558  00017558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a4  080077a4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080077a4  080077a4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077a4  080077a4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a4  080077a4  000177a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080077ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af4  20000014  080077c0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b08  080077c0  00021b08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f0c  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5d  00000000  00000000  00035f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  00039cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f85  00000000  00000000  0003b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e2b  00000000  00000000  0003c0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017837  00000000  00000000  00055ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000974c0  00000000  00000000  0006d717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005244  00000000  00000000  00104bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00109e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08007540 	.word	0x08007540

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08007540 	.word	0x08007540

08000150 <MGPIO_voidSetPinMode>:
#include "GPIO_interface.h"
#include "GPIO_config.h"
#include "GPIO_private.h"

void MGPIO_voidSetPinMode(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Mode)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	460b      	mov	r3, r1
 800015c:	71bb      	strb	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]
    switch(Copy_u8Port)
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2b02      	cmp	r3, #2
 8000166:	f000 8097 	beq.w	8000298 <MGPIO_voidSetPinMode+0x148>
 800016a:	2b02      	cmp	r3, #2
 800016c:	f300 80ee 	bgt.w	800034c <MGPIO_voidSetPinMode+0x1fc>
 8000170:	2b00      	cmp	r3, #0
 8000172:	d002      	beq.n	800017a <MGPIO_voidSetPinMode+0x2a>
 8000174:	2b01      	cmp	r3, #1
 8000176:	d03a      	beq.n	80001ee <MGPIO_voidSetPinMode+0x9e>
            {
            	GPIOC->ODR &= ~(1 << Copy_u8Pin);
            }
            break;
    }
}
 8000178:	e0e8      	b.n	800034c <MGPIO_voidSetPinMode+0x1fc>
            if(Copy_u8Pin <= 7)
 800017a:	79bb      	ldrb	r3, [r7, #6]
 800017c:	2b07      	cmp	r3, #7
 800017e:	d817      	bhi.n	80001b0 <MGPIO_voidSetPinMode+0x60>
                    GPIOA->CRL &= ~((0b1111) << (Copy_u8Pin * 4));
 8000180:	4b75      	ldr	r3, [pc, #468]	; (8000358 <MGPIO_voidSetPinMode+0x208>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	79ba      	ldrb	r2, [r7, #6]
 8000186:	0092      	lsls	r2, r2, #2
 8000188:	210f      	movs	r1, #15
 800018a:	fa01 f202 	lsl.w	r2, r1, r2
 800018e:	43d2      	mvns	r2, r2
 8000190:	4611      	mov	r1, r2
 8000192:	4a71      	ldr	r2, [pc, #452]	; (8000358 <MGPIO_voidSetPinMode+0x208>)
 8000194:	400b      	ands	r3, r1
 8000196:	6013      	str	r3, [r2, #0]
                    GPIOA->CRL |= (Copy_u8Mode << (Copy_u8Pin * 4));
 8000198:	4b6f      	ldr	r3, [pc, #444]	; (8000358 <MGPIO_voidSetPinMode+0x208>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	7979      	ldrb	r1, [r7, #5]
 800019e:	79ba      	ldrb	r2, [r7, #6]
 80001a0:	0092      	lsls	r2, r2, #2
 80001a2:	fa01 f202 	lsl.w	r2, r1, r2
 80001a6:	4611      	mov	r1, r2
 80001a8:	4a6b      	ldr	r2, [pc, #428]	; (8000358 <MGPIO_voidSetPinMode+0x208>)
 80001aa:	430b      	orrs	r3, r1
 80001ac:	6013      	str	r3, [r2, #0]
            break;
 80001ae:	e0c8      	b.n	8000342 <MGPIO_voidSetPinMode+0x1f2>
            else if(Copy_u8Pin <= 15)
 80001b0:	79bb      	ldrb	r3, [r7, #6]
 80001b2:	2b0f      	cmp	r3, #15
 80001b4:	f200 80c5 	bhi.w	8000342 <MGPIO_voidSetPinMode+0x1f2>
                    Copy_u8Pin = Copy_u8Pin - 8;
 80001b8:	79bb      	ldrb	r3, [r7, #6]
 80001ba:	3b08      	subs	r3, #8
 80001bc:	71bb      	strb	r3, [r7, #6]
                    GPIOA->CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 80001be:	4b66      	ldr	r3, [pc, #408]	; (8000358 <MGPIO_voidSetPinMode+0x208>)
 80001c0:	685b      	ldr	r3, [r3, #4]
 80001c2:	79ba      	ldrb	r2, [r7, #6]
 80001c4:	0092      	lsls	r2, r2, #2
 80001c6:	210f      	movs	r1, #15
 80001c8:	fa01 f202 	lsl.w	r2, r1, r2
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	4611      	mov	r1, r2
 80001d0:	4a61      	ldr	r2, [pc, #388]	; (8000358 <MGPIO_voidSetPinMode+0x208>)
 80001d2:	400b      	ands	r3, r1
 80001d4:	6053      	str	r3, [r2, #4]
                    GPIOA->CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 80001d6:	4b60      	ldr	r3, [pc, #384]	; (8000358 <MGPIO_voidSetPinMode+0x208>)
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	7979      	ldrb	r1, [r7, #5]
 80001dc:	79ba      	ldrb	r2, [r7, #6]
 80001de:	0092      	lsls	r2, r2, #2
 80001e0:	fa01 f202 	lsl.w	r2, r1, r2
 80001e4:	4611      	mov	r1, r2
 80001e6:	4a5c      	ldr	r2, [pc, #368]	; (8000358 <MGPIO_voidSetPinMode+0x208>)
 80001e8:	430b      	orrs	r3, r1
 80001ea:	6053      	str	r3, [r2, #4]
            break;
 80001ec:	e0a9      	b.n	8000342 <MGPIO_voidSetPinMode+0x1f2>
            if(Copy_u8Pin <= 7)
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	2b07      	cmp	r3, #7
 80001f2:	d817      	bhi.n	8000224 <MGPIO_voidSetPinMode+0xd4>
                    GPIOB->CRL &= ~((0b1111) << ((Copy_u8Pin) * 4));
 80001f4:	4b59      	ldr	r3, [pc, #356]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	79ba      	ldrb	r2, [r7, #6]
 80001fa:	0092      	lsls	r2, r2, #2
 80001fc:	210f      	movs	r1, #15
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	43d2      	mvns	r2, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a55      	ldr	r2, [pc, #340]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 8000208:	400b      	ands	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
                    GPIOB->CRL |= (Copy_u8Mode << ((Copy_u8Pin) * 4));
 800020c:	4b53      	ldr	r3, [pc, #332]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	7979      	ldrb	r1, [r7, #5]
 8000212:	79ba      	ldrb	r2, [r7, #6]
 8000214:	0092      	lsls	r2, r2, #2
 8000216:	fa01 f202 	lsl.w	r2, r1, r2
 800021a:	4611      	mov	r1, r2
 800021c:	4a4f      	ldr	r2, [pc, #316]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 800021e:	430b      	orrs	r3, r1
 8000220:	6013      	str	r3, [r2, #0]
 8000222:	e01c      	b.n	800025e <MGPIO_voidSetPinMode+0x10e>
            else if(Copy_u8Pin <= 15)
 8000224:	79bb      	ldrb	r3, [r7, #6]
 8000226:	2b0f      	cmp	r3, #15
 8000228:	d819      	bhi.n	800025e <MGPIO_voidSetPinMode+0x10e>
                    Copy_u8Pin = Copy_u8Pin - 8;
 800022a:	79bb      	ldrb	r3, [r7, #6]
 800022c:	3b08      	subs	r3, #8
 800022e:	71bb      	strb	r3, [r7, #6]
                    GPIOB->CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 8000230:	4b4a      	ldr	r3, [pc, #296]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	210f      	movs	r1, #15
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	43d2      	mvns	r2, r2
 8000240:	4611      	mov	r1, r2
 8000242:	4a46      	ldr	r2, [pc, #280]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 8000244:	400b      	ands	r3, r1
 8000246:	6053      	str	r3, [r2, #4]
                    GPIOB->CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 8000248:	4b44      	ldr	r3, [pc, #272]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	7979      	ldrb	r1, [r7, #5]
 800024e:	79ba      	ldrb	r2, [r7, #6]
 8000250:	0092      	lsls	r2, r2, #2
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	4611      	mov	r1, r2
 8000258:	4a40      	ldr	r2, [pc, #256]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 800025a:	430b      	orrs	r3, r1
 800025c:	6053      	str	r3, [r2, #4]
            if(Copy_u8Mode == GPIO_INPUT_PU_PD)
 800025e:	797b      	ldrb	r3, [r7, #5]
 8000260:	2b08      	cmp	r3, #8
 8000262:	d10a      	bne.n	800027a <MGPIO_voidSetPinMode+0x12a>
            	GPIOB->ODR |= (1 << Copy_u8Pin);
 8000264:	4b3d      	ldr	r3, [pc, #244]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	79ba      	ldrb	r2, [r7, #6]
 800026a:	2101      	movs	r1, #1
 800026c:	fa01 f202 	lsl.w	r2, r1, r2
 8000270:	4611      	mov	r1, r2
 8000272:	4a3a      	ldr	r2, [pc, #232]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 8000274:	430b      	orrs	r3, r1
 8000276:	60d3      	str	r3, [r2, #12]
            break;
 8000278:	e065      	b.n	8000346 <MGPIO_voidSetPinMode+0x1f6>
            else if(Copy_u8Mode == GPIO_INPUT_PU_PD)
 800027a:	797b      	ldrb	r3, [r7, #5]
 800027c:	2b08      	cmp	r3, #8
 800027e:	d162      	bne.n	8000346 <MGPIO_voidSetPinMode+0x1f6>
            	GPIOB->ODR &= ~(1 << Copy_u8Pin);
 8000280:	4b36      	ldr	r3, [pc, #216]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	2101      	movs	r1, #1
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	43d2      	mvns	r2, r2
 800028e:	4611      	mov	r1, r2
 8000290:	4a32      	ldr	r2, [pc, #200]	; (800035c <MGPIO_voidSetPinMode+0x20c>)
 8000292:	400b      	ands	r3, r1
 8000294:	60d3      	str	r3, [r2, #12]
            break;
 8000296:	e056      	b.n	8000346 <MGPIO_voidSetPinMode+0x1f6>
            if(Copy_u8Pin <= 7)
 8000298:	79bb      	ldrb	r3, [r7, #6]
 800029a:	2b07      	cmp	r3, #7
 800029c:	d817      	bhi.n	80002ce <MGPIO_voidSetPinMode+0x17e>
                    GPIOC->CRL &= ~((0b1111) << (Copy_u8Pin * 4));
 800029e:	4b30      	ldr	r3, [pc, #192]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	79ba      	ldrb	r2, [r7, #6]
 80002a4:	0092      	lsls	r2, r2, #2
 80002a6:	210f      	movs	r1, #15
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	43d2      	mvns	r2, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a2b      	ldr	r2, [pc, #172]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 80002b2:	400b      	ands	r3, r1
 80002b4:	6013      	str	r3, [r2, #0]
                    GPIOC->CRL |= (Copy_u8Mode << (Copy_u8Pin * 4));
 80002b6:	4b2a      	ldr	r3, [pc, #168]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	7979      	ldrb	r1, [r7, #5]
 80002bc:	79ba      	ldrb	r2, [r7, #6]
 80002be:	0092      	lsls	r2, r2, #2
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a26      	ldr	r2, [pc, #152]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 80002c8:	430b      	orrs	r3, r1
 80002ca:	6013      	str	r3, [r2, #0]
 80002cc:	e01c      	b.n	8000308 <MGPIO_voidSetPinMode+0x1b8>
            else if(Copy_u8Pin <= 15)
 80002ce:	79bb      	ldrb	r3, [r7, #6]
 80002d0:	2b0f      	cmp	r3, #15
 80002d2:	d819      	bhi.n	8000308 <MGPIO_voidSetPinMode+0x1b8>
                    Copy_u8Pin = Copy_u8Pin - 8;
 80002d4:	79bb      	ldrb	r3, [r7, #6]
 80002d6:	3b08      	subs	r3, #8
 80002d8:	71bb      	strb	r3, [r7, #6]
                    GPIOC->CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 80002da:	4b21      	ldr	r3, [pc, #132]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	79ba      	ldrb	r2, [r7, #6]
 80002e0:	0092      	lsls	r2, r2, #2
 80002e2:	210f      	movs	r1, #15
 80002e4:	fa01 f202 	lsl.w	r2, r1, r2
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	4611      	mov	r1, r2
 80002ec:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 80002ee:	400b      	ands	r3, r1
 80002f0:	6053      	str	r3, [r2, #4]
                    GPIOC->CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	7979      	ldrb	r1, [r7, #5]
 80002f8:	79ba      	ldrb	r2, [r7, #6]
 80002fa:	0092      	lsls	r2, r2, #2
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	4611      	mov	r1, r2
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 8000304:	430b      	orrs	r3, r1
 8000306:	6053      	str	r3, [r2, #4]
            if(Copy_u8Mode == GPIO_INPUT_PU_PD)
 8000308:	797b      	ldrb	r3, [r7, #5]
 800030a:	2b08      	cmp	r3, #8
 800030c:	d10a      	bne.n	8000324 <MGPIO_voidSetPinMode+0x1d4>
            	GPIOC->ODR |= (1 << Copy_u8Pin);
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	79ba      	ldrb	r2, [r7, #6]
 8000314:	2101      	movs	r1, #1
 8000316:	fa01 f202 	lsl.w	r2, r1, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a10      	ldr	r2, [pc, #64]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 800031e:	430b      	orrs	r3, r1
 8000320:	60d3      	str	r3, [r2, #12]
            break;
 8000322:	e012      	b.n	800034a <MGPIO_voidSetPinMode+0x1fa>
            else if(Copy_u8Mode == GPIO_INPUT_PU_PD)
 8000324:	797b      	ldrb	r3, [r7, #5]
 8000326:	2b08      	cmp	r3, #8
 8000328:	d10f      	bne.n	800034a <MGPIO_voidSetPinMode+0x1fa>
            	GPIOC->ODR &= ~(1 << Copy_u8Pin);
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	79ba      	ldrb	r2, [r7, #6]
 8000330:	2101      	movs	r1, #1
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a09      	ldr	r2, [pc, #36]	; (8000360 <MGPIO_voidSetPinMode+0x210>)
 800033c:	400b      	ands	r3, r1
 800033e:	60d3      	str	r3, [r2, #12]
            break;
 8000340:	e003      	b.n	800034a <MGPIO_voidSetPinMode+0x1fa>
            break;
 8000342:	bf00      	nop
 8000344:	e002      	b.n	800034c <MGPIO_voidSetPinMode+0x1fc>
            break;
 8000346:	bf00      	nop
 8000348:	e000      	b.n	800034c <MGPIO_voidSetPinMode+0x1fc>
            break;
 800034a:	bf00      	nop
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	40010c00 	.word	0x40010c00
 8000360:	40011000 	.word	0x40011000

08000364 <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
 800036e:	460b      	mov	r3, r1
 8000370:	71bb      	strb	r3, [r7, #6]
 8000372:	4613      	mov	r3, r2
 8000374:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b02      	cmp	r3, #2
 800037a:	d02a      	beq.n	80003d2 <MGPIO_voidSetPinValue+0x6e>
 800037c:	2b02      	cmp	r3, #2
 800037e:	dc3f      	bgt.n	8000400 <MGPIO_voidSetPinValue+0x9c>
 8000380:	2b00      	cmp	r3, #0
 8000382:	d002      	beq.n	800038a <MGPIO_voidSetPinValue+0x26>
 8000384:	2b01      	cmp	r3, #1
 8000386:	d012      	beq.n	80003ae <MGPIO_voidSetPinValue+0x4a>
			GPIOC->BRR = (1 << Copy_u8Pin);
		}
		break;
	}

}
 8000388:	e03a      	b.n	8000400 <MGPIO_voidSetPinValue+0x9c>
		if(Copy_u8Value == GPIO_HIGH)
 800038a:	797b      	ldrb	r3, [r7, #5]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d105      	bne.n	800039c <MGPIO_voidSetPinValue+0x38>
			GPIOA->BSRR = (1 << Copy_u8Pin);
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	2201      	movs	r2, #1
 8000394:	409a      	lsls	r2, r3
 8000396:	4b1d      	ldr	r3, [pc, #116]	; (800040c <MGPIO_voidSetPinValue+0xa8>)
 8000398:	611a      	str	r2, [r3, #16]
		break;
 800039a:	e02c      	b.n	80003f6 <MGPIO_voidSetPinValue+0x92>
		else if(Copy_u8Value == GPIO_LOW)
 800039c:	797b      	ldrb	r3, [r7, #5]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d129      	bne.n	80003f6 <MGPIO_voidSetPinValue+0x92>
			GPIOA->BRR = (1 << Copy_u8Pin);
 80003a2:	79bb      	ldrb	r3, [r7, #6]
 80003a4:	2201      	movs	r2, #1
 80003a6:	409a      	lsls	r2, r3
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <MGPIO_voidSetPinValue+0xa8>)
 80003aa:	615a      	str	r2, [r3, #20]
		break;
 80003ac:	e023      	b.n	80003f6 <MGPIO_voidSetPinValue+0x92>
		if(Copy_u8Value == GPIO_HIGH)
 80003ae:	797b      	ldrb	r3, [r7, #5]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d105      	bne.n	80003c0 <MGPIO_voidSetPinValue+0x5c>
			GPIOB->BSRR = (1 << Copy_u8Pin);
 80003b4:	79bb      	ldrb	r3, [r7, #6]
 80003b6:	2201      	movs	r2, #1
 80003b8:	409a      	lsls	r2, r3
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <MGPIO_voidSetPinValue+0xac>)
 80003bc:	611a      	str	r2, [r3, #16]
		break;
 80003be:	e01c      	b.n	80003fa <MGPIO_voidSetPinValue+0x96>
		else if(Copy_u8Value == GPIO_LOW)
 80003c0:	797b      	ldrb	r3, [r7, #5]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d119      	bne.n	80003fa <MGPIO_voidSetPinValue+0x96>
			GPIOB->BRR = (1 << Copy_u8Pin);
 80003c6:	79bb      	ldrb	r3, [r7, #6]
 80003c8:	2201      	movs	r2, #1
 80003ca:	409a      	lsls	r2, r3
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MGPIO_voidSetPinValue+0xac>)
 80003ce:	615a      	str	r2, [r3, #20]
		break;
 80003d0:	e013      	b.n	80003fa <MGPIO_voidSetPinValue+0x96>
		if(Copy_u8Value == GPIO_HIGH)
 80003d2:	797b      	ldrb	r3, [r7, #5]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d105      	bne.n	80003e4 <MGPIO_voidSetPinValue+0x80>
			GPIOC->BSRR = (1 << Copy_u8Pin);
 80003d8:	79bb      	ldrb	r3, [r7, #6]
 80003da:	2201      	movs	r2, #1
 80003dc:	409a      	lsls	r2, r3
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <MGPIO_voidSetPinValue+0xb0>)
 80003e0:	611a      	str	r2, [r3, #16]
		break;
 80003e2:	e00c      	b.n	80003fe <MGPIO_voidSetPinValue+0x9a>
		else if(Copy_u8Value == GPIO_LOW)
 80003e4:	797b      	ldrb	r3, [r7, #5]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d109      	bne.n	80003fe <MGPIO_voidSetPinValue+0x9a>
			GPIOC->BRR = (1 << Copy_u8Pin);
 80003ea:	79bb      	ldrb	r3, [r7, #6]
 80003ec:	2201      	movs	r2, #1
 80003ee:	409a      	lsls	r2, r3
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MGPIO_voidSetPinValue+0xb0>)
 80003f2:	615a      	str	r2, [r3, #20]
		break;
 80003f4:	e003      	b.n	80003fe <MGPIO_voidSetPinValue+0x9a>
		break;
 80003f6:	bf00      	nop
 80003f8:	e002      	b.n	8000400 <MGPIO_voidSetPinValue+0x9c>
		break;
 80003fa:	bf00      	nop
 80003fc:	e000      	b.n	8000400 <MGPIO_voidSetPinValue+0x9c>
		break;
 80003fe:	bf00      	nop
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40010800 	.word	0x40010800
 8000410:	40010c00 	.word	0x40010c00
 8000414:	40011000 	.word	0x40011000

08000418 <LCD_Init>:
 */
#include "LCD_interface.h"
static void Trigger_Enable();
static void Set_Cursor_Pos(u8 row,u8 column);
void LCD_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinMode(LCD_PORT,D4,GPIO_GP_OUTPUT_PP_2MHZ);
 800041e:	2202      	movs	r2, #2
 8000420:	2100      	movs	r1, #0
 8000422:	2000      	movs	r0, #0
 8000424:	f7ff fe94 	bl	8000150 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_PORT,D5,GPIO_GP_OUTPUT_PP_2MHZ);
 8000428:	2202      	movs	r2, #2
 800042a:	2101      	movs	r1, #1
 800042c:	2000      	movs	r0, #0
 800042e:	f7ff fe8f 	bl	8000150 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_PORT,D6,GPIO_GP_OUTPUT_PP_2MHZ);
 8000432:	2202      	movs	r2, #2
 8000434:	2102      	movs	r1, #2
 8000436:	2000      	movs	r0, #0
 8000438:	f7ff fe8a 	bl	8000150 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_PORT,D7,GPIO_GP_OUTPUT_PP_2MHZ);
 800043c:	2202      	movs	r2, #2
 800043e:	2103      	movs	r1, #3
 8000440:	2000      	movs	r0, #0
 8000442:	f7ff fe85 	bl	8000150 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_PORT,RS,GPIO_GP_OUTPUT_PP_2MHZ);
 8000446:	2202      	movs	r2, #2
 8000448:	2104      	movs	r1, #4
 800044a:	2000      	movs	r0, #0
 800044c:	f7ff fe80 	bl	8000150 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_PORT,RW,GPIO_GP_OUTPUT_PP_2MHZ);
 8000450:	2202      	movs	r2, #2
 8000452:	2105      	movs	r1, #5
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff fe7b 	bl	8000150 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_PORT,EN,GPIO_GP_OUTPUT_PP_2MHZ);
 800045a:	2202      	movs	r2, #2
 800045c:	2106      	movs	r1, #6
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff fe76 	bl	8000150 <MGPIO_voidSetPinMode>
	//_delay_ms(20);
	for(u8 i=0;i<10;i++)
 8000464:	2300      	movs	r3, #0
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	e003      	b.n	8000472 <LCD_Init+0x5a>
	{
		asm("NOP");
 800046a:	bf00      	nop
	for(u8 i=0;i<10;i++)
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	3301      	adds	r3, #1
 8000470:	71fb      	strb	r3, [r7, #7]
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b09      	cmp	r3, #9
 8000476:	d9f8      	bls.n	800046a <LCD_Init+0x52>
	}
	LCD_Send_Command(0x33);
 8000478:	2033      	movs	r0, #51	; 0x33
 800047a:	f000 f816 	bl	80004aa <LCD_Send_Command>
	LCD_Send_Command(0x32);
 800047e:	2032      	movs	r0, #50	; 0x32
 8000480:	f000 f813 	bl	80004aa <LCD_Send_Command>
	LCD_Send_Command(_LCD_4BIT_MODE_2_LINE);
 8000484:	2028      	movs	r0, #40	; 0x28
 8000486:	f000 f810 	bl	80004aa <LCD_Send_Command>
	LCD_Send_Command(_LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 800048a:	200c      	movs	r0, #12
 800048c:	f000 f80d 	bl	80004aa <LCD_Send_Command>
	LCD_Send_Command(_LCD_ENTRY_MODE_INC_SHIFT_OFF);
 8000490:	2006      	movs	r0, #6
 8000492:	f000 f80a 	bl	80004aa <LCD_Send_Command>
	LCD_Send_Command(_LCD_DDRAM_START);
 8000496:	2080      	movs	r0, #128	; 0x80
 8000498:	f000 f807 	bl	80004aa <LCD_Send_Command>
	LCD_Send_Command(_LCD_CLEAR);
 800049c:	2001      	movs	r0, #1
 800049e:	f000 f804 	bl	80004aa <LCD_Send_Command>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <LCD_Send_Command>:
void LCD_Send_Command(u8 command)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	4603      	mov	r3, r0
 80004b2:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(LCD_PORT,RS, GPIO_LOW);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2104      	movs	r1, #4
 80004b8:	2000      	movs	r0, #0
 80004ba:	f7ff ff53 	bl	8000364 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_PORT,RW, GPIO_LOW);
 80004be:	2200      	movs	r2, #0
 80004c0:	2105      	movs	r1, #5
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff ff4e 	bl	8000364 <MGPIO_voidSetPinValue>


	(GET_BET(command,7)) ? MGPIO_voidSetPinValue(LCD_PORT,D7,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D7,GPIO_LOW);
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	09db      	lsrs	r3, r3, #7
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d005      	beq.n	80004e2 <LCD_Send_Command+0x38>
 80004d6:	2201      	movs	r2, #1
 80004d8:	2103      	movs	r1, #3
 80004da:	2000      	movs	r0, #0
 80004dc:	f7ff ff42 	bl	8000364 <MGPIO_voidSetPinValue>
 80004e0:	e004      	b.n	80004ec <LCD_Send_Command+0x42>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2103      	movs	r1, #3
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff ff3c 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(command,6)) ? MGPIO_voidSetPinValue(LCD_PORT,D6,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D6,GPIO_LOW);
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	099b      	lsrs	r3, r3, #6
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d005      	beq.n	8000506 <LCD_Send_Command+0x5c>
 80004fa:	2201      	movs	r2, #1
 80004fc:	2102      	movs	r1, #2
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff ff30 	bl	8000364 <MGPIO_voidSetPinValue>
 8000504:	e004      	b.n	8000510 <LCD_Send_Command+0x66>
 8000506:	2200      	movs	r2, #0
 8000508:	2102      	movs	r1, #2
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff ff2a 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(command,5)) ? MGPIO_voidSetPinValue(LCD_PORT,D5,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D5,GPIO_LOW);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	095b      	lsrs	r3, r3, #5
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	2b00      	cmp	r3, #0
 800051c:	d005      	beq.n	800052a <LCD_Send_Command+0x80>
 800051e:	2201      	movs	r2, #1
 8000520:	2101      	movs	r1, #1
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ff1e 	bl	8000364 <MGPIO_voidSetPinValue>
 8000528:	e004      	b.n	8000534 <LCD_Send_Command+0x8a>
 800052a:	2200      	movs	r2, #0
 800052c:	2101      	movs	r1, #1
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff ff18 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(command,4)) ? MGPIO_voidSetPinValue(LCD_PORT,D4,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D4,GPIO_LOW);
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	091b      	lsrs	r3, r3, #4
 8000538:	b2db      	uxtb	r3, r3
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	2b00      	cmp	r3, #0
 8000540:	d005      	beq.n	800054e <LCD_Send_Command+0xa4>
 8000542:	2201      	movs	r2, #1
 8000544:	2100      	movs	r1, #0
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff ff0c 	bl	8000364 <MGPIO_voidSetPinValue>
 800054c:	e004      	b.n	8000558 <LCD_Send_Command+0xae>
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ff06 	bl	8000364 <MGPIO_voidSetPinValue>
	//Trigger Enable
	Trigger_Enable();
 8000558:	f000 f97a 	bl	8000850 <Trigger_Enable>
	(GET_BET(command,3)) ? MGPIO_voidSetPinValue(LCD_PORT,D7,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D7,GPIO_LOW);
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	08db      	lsrs	r3, r3, #3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <LCD_Send_Command+0xcc>
 800056a:	2201      	movs	r2, #1
 800056c:	2103      	movs	r1, #3
 800056e:	2000      	movs	r0, #0
 8000570:	f7ff fef8 	bl	8000364 <MGPIO_voidSetPinValue>
 8000574:	e004      	b.n	8000580 <LCD_Send_Command+0xd6>
 8000576:	2200      	movs	r2, #0
 8000578:	2103      	movs	r1, #3
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff fef2 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(command,2)) ? MGPIO_voidSetPinValue(LCD_PORT,D6,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D6,GPIO_LOW);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	089b      	lsrs	r3, r3, #2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d005      	beq.n	800059a <LCD_Send_Command+0xf0>
 800058e:	2201      	movs	r2, #1
 8000590:	2102      	movs	r1, #2
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff fee6 	bl	8000364 <MGPIO_voidSetPinValue>
 8000598:	e004      	b.n	80005a4 <LCD_Send_Command+0xfa>
 800059a:	2200      	movs	r2, #0
 800059c:	2102      	movs	r1, #2
 800059e:	2000      	movs	r0, #0
 80005a0:	f7ff fee0 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(command,1)) ? MGPIO_voidSetPinValue(LCD_PORT,D5,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D5,GPIO_LOW);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d005      	beq.n	80005be <LCD_Send_Command+0x114>
 80005b2:	2201      	movs	r2, #1
 80005b4:	2101      	movs	r1, #1
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff fed4 	bl	8000364 <MGPIO_voidSetPinValue>
 80005bc:	e004      	b.n	80005c8 <LCD_Send_Command+0x11e>
 80005be:	2200      	movs	r2, #0
 80005c0:	2101      	movs	r1, #1
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff fece 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(command,0)) ? MGPIO_voidSetPinValue(LCD_PORT,D4,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D4,GPIO_LOW);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d005      	beq.n	80005de <LCD_Send_Command+0x134>
 80005d2:	2201      	movs	r2, #1
 80005d4:	2100      	movs	r1, #0
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff fec4 	bl	8000364 <MGPIO_voidSetPinValue>
 80005dc:	e004      	b.n	80005e8 <LCD_Send_Command+0x13e>
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff febe 	bl	8000364 <MGPIO_voidSetPinValue>
	//Trigger Enable
	Trigger_Enable();
 80005e8:	f000 f932 	bl	8000850 <Trigger_Enable>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <LCD_Send_Char>:
void LCD_Send_Char(u8 _char)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(LCD_PORT,RS, GPIO_HIGH);
 80005fe:	2201      	movs	r2, #1
 8000600:	2104      	movs	r1, #4
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff feae 	bl	8000364 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(LCD_PORT,RW, GPIO_LOW);
 8000608:	2200      	movs	r2, #0
 800060a:	2105      	movs	r1, #5
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff fea9 	bl	8000364 <MGPIO_voidSetPinValue>


	(GET_BET(_char,7)) ? MGPIO_voidSetPinValue(LCD_PORT,D7,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D7,GPIO_LOW);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	09db      	lsrs	r3, r3, #7
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <LCD_Send_Char+0x38>
 8000620:	2201      	movs	r2, #1
 8000622:	2103      	movs	r1, #3
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff fe9d 	bl	8000364 <MGPIO_voidSetPinValue>
 800062a:	e004      	b.n	8000636 <LCD_Send_Char+0x42>
 800062c:	2200      	movs	r2, #0
 800062e:	2103      	movs	r1, #3
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff fe97 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(_char,6)) ? MGPIO_voidSetPinValue(LCD_PORT,D6,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D6,GPIO_LOW);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	099b      	lsrs	r3, r3, #6
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d005      	beq.n	8000650 <LCD_Send_Char+0x5c>
 8000644:	2201      	movs	r2, #1
 8000646:	2102      	movs	r1, #2
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff fe8b 	bl	8000364 <MGPIO_voidSetPinValue>
 800064e:	e004      	b.n	800065a <LCD_Send_Char+0x66>
 8000650:	2200      	movs	r2, #0
 8000652:	2102      	movs	r1, #2
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fe85 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(_char,5)) ? MGPIO_voidSetPinValue(LCD_PORT,D5,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D5,GPIO_LOW);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	095b      	lsrs	r3, r3, #5
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <LCD_Send_Char+0x80>
 8000668:	2201      	movs	r2, #1
 800066a:	2101      	movs	r1, #1
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff fe79 	bl	8000364 <MGPIO_voidSetPinValue>
 8000672:	e004      	b.n	800067e <LCD_Send_Char+0x8a>
 8000674:	2200      	movs	r2, #0
 8000676:	2101      	movs	r1, #1
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff fe73 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(_char,4)) ? MGPIO_voidSetPinValue(LCD_PORT,D4,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D4,GPIO_LOW);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	091b      	lsrs	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d005      	beq.n	8000698 <LCD_Send_Char+0xa4>
 800068c:	2201      	movs	r2, #1
 800068e:	2100      	movs	r1, #0
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fe67 	bl	8000364 <MGPIO_voidSetPinValue>
 8000696:	e004      	b.n	80006a2 <LCD_Send_Char+0xae>
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fe61 	bl	8000364 <MGPIO_voidSetPinValue>
	//Trigger Enable
	Trigger_Enable();
 80006a2:	f000 f8d5 	bl	8000850 <Trigger_Enable>
	(GET_BET(_char,3)) ? MGPIO_voidSetPinValue(LCD_PORT,D7,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D7,GPIO_LOW);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d005      	beq.n	80006c0 <LCD_Send_Char+0xcc>
 80006b4:	2201      	movs	r2, #1
 80006b6:	2103      	movs	r1, #3
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff fe53 	bl	8000364 <MGPIO_voidSetPinValue>
 80006be:	e004      	b.n	80006ca <LCD_Send_Char+0xd6>
 80006c0:	2200      	movs	r2, #0
 80006c2:	2103      	movs	r1, #3
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff fe4d 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(_char,2)) ? MGPIO_voidSetPinValue(LCD_PORT,D6,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D6,GPIO_LOW);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <LCD_Send_Char+0xf0>
 80006d8:	2201      	movs	r2, #1
 80006da:	2102      	movs	r1, #2
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff fe41 	bl	8000364 <MGPIO_voidSetPinValue>
 80006e2:	e004      	b.n	80006ee <LCD_Send_Char+0xfa>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2102      	movs	r1, #2
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff fe3b 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(_char,1)) ? MGPIO_voidSetPinValue(LCD_PORT,D5,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D5,GPIO_LOW);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	085b      	lsrs	r3, r3, #1
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d005      	beq.n	8000708 <LCD_Send_Char+0x114>
 80006fc:	2201      	movs	r2, #1
 80006fe:	2101      	movs	r1, #1
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fe2f 	bl	8000364 <MGPIO_voidSetPinValue>
 8000706:	e004      	b.n	8000712 <LCD_Send_Char+0x11e>
 8000708:	2200      	movs	r2, #0
 800070a:	2101      	movs	r1, #1
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff fe29 	bl	8000364 <MGPIO_voidSetPinValue>
	(GET_BET(_char,0)) ? MGPIO_voidSetPinValue(LCD_PORT,D4,GPIO_HIGH) : MGPIO_voidSetPinValue(LCD_PORT,D4,GPIO_LOW);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	2b00      	cmp	r3, #0
 800071a:	d005      	beq.n	8000728 <LCD_Send_Char+0x134>
 800071c:	2201      	movs	r2, #1
 800071e:	2100      	movs	r1, #0
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff fe1f 	bl	8000364 <MGPIO_voidSetPinValue>
 8000726:	e004      	b.n	8000732 <LCD_Send_Char+0x13e>
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff fe19 	bl	8000364 <MGPIO_voidSetPinValue>
	//Trigger Enable
	Trigger_Enable();
 8000732:	f000 f88d 	bl	8000850 <Trigger_Enable>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <LCD_Send_String>:
{
	Set_Cursor_Pos(row,column);
	LCD_Send_Char(_char);
}
void LCD_Send_String(u8 *string)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
	while(*string !='\0')
 8000746:	e006      	b.n	8000756 <LCD_Send_String+0x18>
	{
		LCD_Send_Char(*string++);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff4f 	bl	80005f4 <LCD_Send_Char>
	while(*string !='\0')
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1f4      	bne.n	8000748 <LCD_Send_String+0xa>
	}
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Send_String_Pos>:
void LCD_Send_String_Pos(u8 *string,u8 row,u8 column)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
 8000774:	4613      	mov	r3, r2
 8000776:	70bb      	strb	r3, [r7, #2]
	Set_Cursor_Pos(row,column);
 8000778:	78ba      	ldrb	r2, [r7, #2]
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f88d 	bl	800089e <Set_Cursor_Pos>
	LCD_Send_String(string);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ffda 	bl	800073e <LCD_Send_String>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <LCD_Send_Number>:
void LCD_Send_Number(u32 num)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	 u8 arr[10],i=0,j=0;
 800079c:	2300      	movs	r3, #0
 800079e:	75fb      	strb	r3, [r7, #23]
 80007a0:	2300      	movs	r3, #0
 80007a2:	75bb      	strb	r3, [r7, #22]
		   if(num == 0)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d11e      	bne.n	80007e8 <LCD_Send_Number+0x54>
		   {
			   LCD_Send_Char('0');
 80007aa:	2030      	movs	r0, #48	; 0x30
 80007ac:	f7ff ff22 	bl	80005f4 <LCD_Send_Char>
			   for(j=i;j>0;j--)
			   {
				   LCD_Send_Char(arr[j-1]);
			   }
		   }
}
 80007b0:	e02f      	b.n	8000812 <LCD_Send_Number+0x7e>
					arr[i]=num%10+'0';
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <LCD_Send_Number+0x88>)
 80007b6:	fba3 2301 	umull	r2, r3, r3, r1
 80007ba:	08da      	lsrs	r2, r3, #3
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	1aca      	subs	r2, r1, r3
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
 80007ca:	3230      	adds	r2, #48	; 0x30
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	3318      	adds	r3, #24
 80007d0:	443b      	add	r3, r7
 80007d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
					num/=10;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a10      	ldr	r2, [pc, #64]	; (800081c <LCD_Send_Number+0x88>)
 80007da:	fba2 2303 	umull	r2, r3, r2, r3
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	607b      	str	r3, [r7, #4]
					i++;
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	3301      	adds	r3, #1
 80007e6:	75fb      	strb	r3, [r7, #23]
			   while(num)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1e1      	bne.n	80007b2 <LCD_Send_Number+0x1e>
			   for(j=i;j>0;j--)
 80007ee:	7dfb      	ldrb	r3, [r7, #23]
 80007f0:	75bb      	strb	r3, [r7, #22]
 80007f2:	e00b      	b.n	800080c <LCD_Send_Number+0x78>
				   LCD_Send_Char(arr[j-1]);
 80007f4:	7dbb      	ldrb	r3, [r7, #22]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	3318      	adds	r3, #24
 80007fa:	443b      	add	r3, r7
 80007fc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fef7 	bl	80005f4 <LCD_Send_Char>
			   for(j=i;j>0;j--)
 8000806:	7dbb      	ldrb	r3, [r7, #22]
 8000808:	3b01      	subs	r3, #1
 800080a:	75bb      	strb	r3, [r7, #22]
 800080c:	7dbb      	ldrb	r3, [r7, #22]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1f0      	bne.n	80007f4 <LCD_Send_Number+0x60>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	cccccccd 	.word	0xcccccccd

08000820 <LCD_Send_Number_Pos>:
void LCD_Send_Number_Pos(u32 num,u8 row,u8 column)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
 800082c:	4613      	mov	r3, r2
 800082e:	70bb      	strb	r3, [r7, #2]
	Set_Cursor_Pos(row,column);
 8000830:	78ba      	ldrb	r2, [r7, #2]
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f831 	bl	800089e <Set_Cursor_Pos>
	LCD_Send_Number(num);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ffa9 	bl	8000794 <LCD_Send_Number>
	LCD_Send_Char(' ');
 8000842:	2020      	movs	r0, #32
 8000844:	f7ff fed6 	bl	80005f4 <LCD_Send_Char>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <Trigger_Enable>:
    LCD_Send_Char_Pos(mem_pos,row,column);
}


static void Trigger_Enable()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinValue(LCD_PORT,EN,GPIO_HIGH);
 8000856:	2201      	movs	r2, #1
 8000858:	2106      	movs	r1, #6
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fd82 	bl	8000364 <MGPIO_voidSetPinValue>
	for(u8 i=0;i<10;i++)
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	e003      	b.n	800086e <Trigger_Enable+0x1e>
	{
		asm("NOP");
 8000866:	bf00      	nop
	for(u8 i=0;i<10;i++)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	3301      	adds	r3, #1
 800086c:	71fb      	strb	r3, [r7, #7]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b09      	cmp	r3, #9
 8000872:	d9f8      	bls.n	8000866 <Trigger_Enable+0x16>
	}
	//DELAY
	MGPIO_voidSetPinValue(LCD_PORT,EN,GPIO_LOW);
 8000874:	2200      	movs	r2, #0
 8000876:	2106      	movs	r1, #6
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff fd73 	bl	8000364 <MGPIO_voidSetPinValue>
	for(u16 i=0;i<2000;i++)
 800087e:	2300      	movs	r3, #0
 8000880:	80bb      	strh	r3, [r7, #4]
 8000882:	e003      	b.n	800088c <Trigger_Enable+0x3c>
	{
		asm("NOP");
 8000884:	bf00      	nop
	for(u16 i=0;i<2000;i++)
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	80bb      	strh	r3, [r7, #4]
 800088c:	88bb      	ldrh	r3, [r7, #4]
 800088e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000892:	d3f7      	bcc.n	8000884 <Trigger_Enable+0x34>
	}
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <Set_Cursor_Pos>:
static void Set_Cursor_Pos(u8 row,u8 column)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	460a      	mov	r2, r1
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	4613      	mov	r3, r2
 80008ac:	71bb      	strb	r3, [r7, #6]
	column--;
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	71bb      	strb	r3, [r7, #6]
	switch(row)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d002      	beq.n	80008c0 <Set_Cursor_Pos+0x22>
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d007      	beq.n	80008ce <Set_Cursor_Pos+0x30>
			{
	            case ROW1: LCD_Send_Command((0x80 + column)); break;
	            case ROW2: LCD_Send_Command((0xc0 + column)); break;
	            default:;
	        }
}
 80008be:	e00d      	b.n	80008dc <Set_Cursor_Pos+0x3e>
	            case ROW1: LCD_Send_Command((0x80 + column)); break;
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	3b80      	subs	r3, #128	; 0x80
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fdef 	bl	80004aa <LCD_Send_Command>
 80008cc:	e006      	b.n	80008dc <Set_Cursor_Pos+0x3e>
	            case ROW2: LCD_Send_Command((0xc0 + column)); break;
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	3b40      	subs	r3, #64	; 0x40
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fde8 	bl	80004aa <LCD_Send_Command>
 80008da:	bf00      	nop
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MRCC_voidPeripheralClockEnable>:

#endif

}
void MRCC_voidPeripheralClockEnable(u8 Copy_u8BusName,peripherals_t Copy_u8PeripheralName)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8BusName)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d01c      	beq.n	8000934 <MRCC_voidPeripheralClockEnable+0x50>
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	dc25      	bgt.n	800094a <MRCC_voidPeripheralClockEnable+0x66>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <MRCC_voidPeripheralClockEnable+0x24>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d00b      	beq.n	800091e <MRCC_voidPeripheralClockEnable+0x3a>
		break;
	case RCC_APB2:
		SET_BET(RCC->APB2ENR,Copy_u8PeripheralName);
		break;
	}
}
 8000906:	e020      	b.n	800094a <MRCC_voidPeripheralClockEnable+0x66>
		SET_BET(RCC->AHBENR,Copy_u8PeripheralName);
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MRCC_voidPeripheralClockEnable+0x70>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	79ba      	ldrb	r2, [r7, #6]
 800090e:	2101      	movs	r1, #1
 8000910:	fa01 f202 	lsl.w	r2, r1, r2
 8000914:	4611      	mov	r1, r2
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <MRCC_voidPeripheralClockEnable+0x70>)
 8000918:	430b      	orrs	r3, r1
 800091a:	6153      	str	r3, [r2, #20]
		break;
 800091c:	e015      	b.n	800094a <MRCC_voidPeripheralClockEnable+0x66>
		SET_BET(RCC->APB1ENR,Copy_u8PeripheralName);
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MRCC_voidPeripheralClockEnable+0x70>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	79ba      	ldrb	r2, [r7, #6]
 8000924:	2101      	movs	r1, #1
 8000926:	fa01 f202 	lsl.w	r2, r1, r2
 800092a:	4611      	mov	r1, r2
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <MRCC_voidPeripheralClockEnable+0x70>)
 800092e:	430b      	orrs	r3, r1
 8000930:	61d3      	str	r3, [r2, #28]
		break;
 8000932:	e00a      	b.n	800094a <MRCC_voidPeripheralClockEnable+0x66>
		SET_BET(RCC->APB2ENR,Copy_u8PeripheralName);
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MRCC_voidPeripheralClockEnable+0x70>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	79ba      	ldrb	r2, [r7, #6]
 800093a:	2101      	movs	r1, #1
 800093c:	fa01 f202 	lsl.w	r2, r1, r2
 8000940:	4611      	mov	r1, r2
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <MRCC_voidPeripheralClockEnable+0x70>)
 8000944:	430b      	orrs	r3, r1
 8000946:	6193      	str	r3, [r2, #24]
		break;
 8000948:	bf00      	nop
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000

08000958 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_ADC1_Init+0x98>)
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <MX_ADC1_Init+0x9c>)
 800096c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_ADC1_Init+0x98>)
 8000970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000974:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_ADC1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_ADC1_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_ADC1_Init+0x98>)
 8000984:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000988:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_ADC1_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_ADC1_Init+0x98>)
 8000992:	2202      	movs	r2, #2
 8000994:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000996:	4816      	ldr	r0, [pc, #88]	; (80009f0 <MX_ADC1_Init+0x98>)
 8000998:	f000 fe08 	bl	80015ac <HAL_ADC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80009a2:	f000 fc05 	bl	80011b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009a6:	2309      	movs	r3, #9
 80009a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80009ae:	2303      	movs	r3, #3
 80009b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <MX_ADC1_Init+0x98>)
 80009b8:	f001 f85a 	bl	8001a70 <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 fbf5 	bl	80011b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009c6:	2308      	movs	r3, #8
 80009c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_ADC1_Init+0x98>)
 80009d8:	f001 f84a 	bl	8001a70 <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009e2:	f000 fbe5 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000030 	.word	0x20000030
 80009f4:	40012400 	.word	0x40012400

080009f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_ADC_MspInit+0x7c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d129      	bne.n	8000a6c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	4809      	ldr	r0, [pc, #36]	; (8000a7c <HAL_ADC_MspInit+0x84>)
 8000a58:	f001 fab4 	bl	8001fc4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2105      	movs	r1, #5
 8000a60:	2012      	movs	r0, #18
 8000a62:	f001 fa78 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a66:	2012      	movs	r0, #18
 8000a68:	f001 fa91 	bl	8001f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40012400 	.word	0x40012400
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010c00 	.word	0x40010c00

08000a80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of LCD_Semaphoer */
  LCD_SemaphoerHandle = osSemaphoreNew(1, 1, &LCD_Semaphoer_attributes);
 8000a84:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <MX_FREERTOS_Init+0xa4>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f003 f883 	bl	8003b94 <osSemaphoreNew>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <MX_FREERTOS_Init+0xa8>)
 8000a92:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Passwors */
  PassworsHandle = osMessageQueueNew (4, sizeof(uint8_t), &Passwors_attributes);
 8000a94:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <MX_FREERTOS_Init+0xac>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	2004      	movs	r0, #4
 8000a9a:	f003 f9d5 	bl	8003e48 <osMessageQueueNew>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <MX_FREERTOS_Init+0xb0>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* creation of TempQueue */
  TempQueueHandle = osMessageQueueNew (3, sizeof(uint32_t), &TempQueue_attributes);
 8000aa4:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <MX_FREERTOS_Init+0xb4>)
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f003 f9cd 	bl	8003e48 <osMessageQueueNew>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <MX_FREERTOS_Init+0xb8>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* creation of GasQueue */
  GasQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &GasQueue_attributes);
 8000ab4:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <MX_FREERTOS_Init+0xbc>)
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	2010      	movs	r0, #16
 8000aba:	f003 f9c5 	bl	8003e48 <osMessageQueueNew>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <MX_FREERTOS_Init+0xc0>)
 8000ac2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of KeypadTask */
  KeypadTaskHandle = osThreadNew(Keypad_Task, NULL, &KeypadTask_attributes);
 8000ac4:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <MX_FREERTOS_Init+0xc4>)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	481f      	ldr	r0, [pc, #124]	; (8000b48 <MX_FREERTOS_Init+0xc8>)
 8000aca:	f002 ff39 	bl	8003940 <osThreadNew>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a1e      	ldr	r2, [pc, #120]	; (8000b4c <MX_FREERTOS_Init+0xcc>)
 8000ad2:	6013      	str	r3, [r2, #0]

  /* creation of Password */
  PasswordHandle = osThreadNew(Password_Task, NULL, &Password_attributes);
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <MX_FREERTOS_Init+0xd0>)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	481e      	ldr	r0, [pc, #120]	; (8000b54 <MX_FREERTOS_Init+0xd4>)
 8000ada:	f002 ff31 	bl	8003940 <osThreadNew>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <MX_FREERTOS_Init+0xd8>)
 8000ae2:	6013      	str	r3, [r2, #0]

  /* creation of TempTask */
  TempTaskHandle = osThreadNew(Temperature_Task, NULL, &TempTask_attributes);
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <MX_FREERTOS_Init+0xdc>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	481d      	ldr	r0, [pc, #116]	; (8000b60 <MX_FREERTOS_Init+0xe0>)
 8000aea:	f002 ff29 	bl	8003940 <osThreadNew>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <MX_FREERTOS_Init+0xe4>)
 8000af2:	6013      	str	r3, [r2, #0]

  /* creation of lightTask */
  lightTaskHandle = osThreadNew(Light_Task, NULL, &lightTask_attributes);
 8000af4:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_FREERTOS_Init+0xe8>)
 8000af6:	2100      	movs	r1, #0
 8000af8:	481c      	ldr	r0, [pc, #112]	; (8000b6c <MX_FREERTOS_Init+0xec>)
 8000afa:	f002 ff21 	bl	8003940 <osThreadNew>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <MX_FREERTOS_Init+0xf0>)
 8000b02:	6013      	str	r3, [r2, #0]

  /* creation of Window */
  WindowHandle = osThreadNew(Window_Task, NULL, &Window_attributes);
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <MX_FREERTOS_Init+0xf4>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	481b      	ldr	r0, [pc, #108]	; (8000b78 <MX_FREERTOS_Init+0xf8>)
 8000b0a:	f002 ff19 	bl	8003940 <osThreadNew>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <MX_FREERTOS_Init+0xfc>)
 8000b12:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of window */
  windowHandle = osEventFlagsNew(&window_attributes);
 8000b14:	481a      	ldr	r0, [pc, #104]	; (8000b80 <MX_FREERTOS_Init+0x100>)
 8000b16:	f002 ffeb 	bl	8003af0 <osEventFlagsNew>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <MX_FREERTOS_Init+0x104>)
 8000b1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	08007760 	.word	0x08007760
 8000b28:	20000084 	.word	0x20000084
 8000b2c:	08007718 	.word	0x08007718
 8000b30:	20000078 	.word	0x20000078
 8000b34:	08007730 	.word	0x08007730
 8000b38:	2000007c 	.word	0x2000007c
 8000b3c:	08007748 	.word	0x08007748
 8000b40:	20000080 	.word	0x20000080
 8000b44:	08007664 	.word	0x08007664
 8000b48:	08000b89 	.word	0x08000b89
 8000b4c:	20000064 	.word	0x20000064
 8000b50:	08007688 	.word	0x08007688
 8000b54:	08000c51 	.word	0x08000c51
 8000b58:	20000068 	.word	0x20000068
 8000b5c:	080076ac 	.word	0x080076ac
 8000b60:	08000d65 	.word	0x08000d65
 8000b64:	2000006c 	.word	0x2000006c
 8000b68:	080076d0 	.word	0x080076d0
 8000b6c:	08000e1d 	.word	0x08000e1d
 8000b70:	20000070 	.word	0x20000070
 8000b74:	080076f4 	.word	0x080076f4
 8000b78:	08000eb9 	.word	0x08000eb9
 8000b7c:	20000074 	.word	0x20000074
 8000b80:	08007770 	.word	0x08007770
 8000b84:	20000088 	.word	0x20000088

08000b88 <Keypad_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Keypad_Task */
void Keypad_Task(void *argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Keypad_Task */
	uint8_t IncremmentButton=0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]
	uint8_t DecremmentButton=0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73bb      	strb	r3, [r7, #14]
	uint8_t EnterButton=0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	737b      	strb	r3, [r7, #13]
	uint8_t DigitNumberPass=0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	733b      	strb	r3, [r7, #12]
	uint8_t ConfirmDigit=99;
 8000ba0:	2363      	movs	r3, #99	; 0x63
 8000ba2:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
		//vTaskSuspend(PasswordHandle);
		//vTaskSuspend(KeypadTaskHandle);
	  IncremmentButton = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4828      	ldr	r0, [pc, #160]	; (8000c48 <Keypad_Task+0xc0>)
 8000ba8:	f001 fb90 	bl	80022cc <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	73fb      	strb	r3, [r7, #15]
	  DecremmentButton =  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	4825      	ldr	r0, [pc, #148]	; (8000c48 <Keypad_Task+0xc0>)
 8000bb4:	f001 fb8a 	bl	80022cc <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73bb      	strb	r3, [r7, #14]
	  EnterButton = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4822      	ldr	r0, [pc, #136]	; (8000c48 <Keypad_Task+0xc0>)
 8000bc0:	f001 fb84 	bl	80022cc <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	737b      	strb	r3, [r7, #13]
	  if(IncremmentButton == 1)
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d116      	bne.n	8000bfc <Keypad_Task+0x74>
	  {
		  if(DigitNumberPass<9)
 8000bce:	7b3b      	ldrb	r3, [r7, #12]
 8000bd0:	2b08      	cmp	r3, #8
 8000bd2:	d804      	bhi.n	8000bde <Keypad_Task+0x56>
		  {
			  DigitNumberPass++;
 8000bd4:	7b3b      	ldrb	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	733b      	strb	r3, [r7, #12]
 8000bdc:	e004      	b.n	8000be8 <Keypad_Task+0x60>
		  }
		  else if(DigitNumberPass == 9)
 8000bde:	7b3b      	ldrb	r3, [r7, #12]
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	d101      	bne.n	8000be8 <Keypad_Task+0x60>
		  {
			  DigitNumberPass = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	733b      	strb	r3, [r7, #12]
		  }
		  xQueueSendToFront(PassworsHandle,(void*)&DigitNumberPass,portMAX_DELAY);
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <Keypad_Task+0xc4>)
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	f107 010c 	add.w	r1, r7, #12
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf6:	f003 fe03 	bl	8004800 <xQueueGenericSend>
 8000bfa:	e015      	b.n	8000c28 <Keypad_Task+0xa0>
	  }
	  else if(DecremmentButton == 1)
 8000bfc:	7bbb      	ldrb	r3, [r7, #14]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d112      	bne.n	8000c28 <Keypad_Task+0xa0>
	  {
		  if(DigitNumberPass == 0)
 8000c02:	7b3b      	ldrb	r3, [r7, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <Keypad_Task+0x86>
		  {
			  DigitNumberPass = 9;
 8000c08:	2309      	movs	r3, #9
 8000c0a:	733b      	strb	r3, [r7, #12]
 8000c0c:	e003      	b.n	8000c16 <Keypad_Task+0x8e>
		  }
		  else{
			  DigitNumberPass--;
 8000c0e:	7b3b      	ldrb	r3, [r7, #12]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	733b      	strb	r3, [r7, #12]
		  }
		  xQueueSendToFront(PassworsHandle,(void*)&DigitNumberPass,portMAX_DELAY);
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <Keypad_Task+0xc4>)
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	f107 010c 	add.w	r1, r7, #12
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	f003 fdec 	bl	8004800 <xQueueGenericSend>

	  }
	  if(EnterButton == 1)
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d108      	bne.n	8000c40 <Keypad_Task+0xb8>
	  {
		  xQueueSendToFront(PassworsHandle,(void*)&ConfirmDigit,portMAX_DELAY);
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <Keypad_Task+0xc4>)
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	f107 010b 	add.w	r1, r7, #11
 8000c36:	2301      	movs	r3, #1
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	f003 fde0 	bl	8004800 <xQueueGenericSend>
	  }
	  HAL_Delay(150);
 8000c40:	2096      	movs	r0, #150	; 0x96
 8000c42:	f000 fc8f 	bl	8001564 <HAL_Delay>
	  IncremmentButton = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000c46:	e7ad      	b.n	8000ba4 <Keypad_Task+0x1c>
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	20000078 	.word	0x20000078

08000c50 <Password_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Password_Task */
void Password_Task(void *argument)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Password_Task */
	uint8_t DigitNumberPass=0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
	BaseType_t RetVal=pdFALSE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
	uint8_t LCDPassPos = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  for(;;)
  {
	  LCD_Send_String_Pos("Check password", 1, 1);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2101      	movs	r1, #1
 8000c68:	4836      	ldr	r0, [pc, #216]	; (8000d44 <Password_Task+0xf4>)
 8000c6a:	f7ff fd7d 	bl	8000768 <LCD_Send_String_Pos>
	  RetVal = xQueueReceive(PassworsHandle, &DigitNumberPass, portMAX_DELAY);
 8000c6e:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <Password_Task+0xf8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f107 010f 	add.w	r1, r7, #15
 8000c76:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 ffe4 	bl	8004c48 <xQueueReceive>
 8000c80:	6138      	str	r0, [r7, #16]
	  if(RetVal == pdTRUE)
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d1ed      	bne.n	8000c64 <Password_Task+0x14>
	  {
		  if(DigitNumberPass != 99){
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	2b63      	cmp	r3, #99	; 0x63
 8000c8c:	d00c      	beq.n	8000ca8 <Password_Task+0x58>
			  LCD_Send_Number_Pos(DigitNumberPass, 2, LCDPassPos);
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	4618      	mov	r0, r3
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	461a      	mov	r2, r3
 8000c96:	2102      	movs	r1, #2
 8000c98:	f7ff fdc2 	bl	8000820 <LCD_Send_Number_Pos>
			  enteredPassword[LCDPassPos-1]=DigitNumberPass;
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	7bf9      	ldrb	r1, [r7, #15]
 8000ca2:	4a2a      	ldr	r2, [pc, #168]	; (8000d4c <Password_Task+0xfc>)
 8000ca4:	54d1      	strb	r1, [r2, r3]
 8000ca6:	e005      	b.n	8000cb4 <Password_Task+0x64>

		  }
		  else if(DigitNumberPass == 99)
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	2b63      	cmp	r3, #99	; 0x63
 8000cac:	d102      	bne.n	8000cb4 <Password_Task+0x64>
		  {

			  LCDPassPos++;
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	75fb      	strb	r3, [r7, #23]
		  }
		  if(LCDPassPos==6)
 8000cb4:	7dfb      	ldrb	r3, [r7, #23]
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d1d4      	bne.n	8000c64 <Password_Task+0x14>
		  {
				if (CheckPassword(enteredPassword) == 1)
 8000cba:	4824      	ldr	r0, [pc, #144]	; (8000d4c <Password_Task+0xfc>)
 8000cbc:	f000 f93e 	bl	8000f3c <CheckPassword>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d11e      	bne.n	8000d04 <Password_Task+0xb4>
				{

					LCD_Send_Command(_LCD_CLEAR);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff fbef 	bl	80004aa <LCD_Send_Command>
					LCD_Send_String_Pos("correct password", 1, 1);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2101      	movs	r1, #1
 8000cd0:	481f      	ldr	r0, [pc, #124]	; (8000d50 <Password_Task+0x100>)
 8000cd2:	f7ff fd49 	bl	8000768 <LCD_Send_String_Pos>
					HAL_Delay(3000);
 8000cd6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cda:	f000 fc43 	bl	8001564 <HAL_Delay>
					LCD_Send_Command(_LCD_CLEAR);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff fbe3 	bl	80004aa <LCD_Send_Command>
					LCD_Send_String_Pos("Door is opened", 1, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <Password_Task+0x104>)
 8000cea:	f7ff fd3d 	bl	8000768 <LCD_Send_String_Pos>
					vTaskSuspend(PasswordHandle);
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <Password_Task+0x108>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f004 fdb0 	bl	8005858 <vTaskSuspend>
					vTaskSuspend(KeypadTaskHandle);
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <Password_Task+0x10c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fdab 	bl	8005858 <vTaskSuspend>
 8000d02:	e7af      	b.n	8000c64 <Password_Task+0x14>
				}
				else
				{

					LCD_Send_Command(_LCD_CLEAR);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fbd0 	bl	80004aa <LCD_Send_Command>
					LCD_Send_String_Pos("wrong password", 1, 1);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <Password_Task+0x110>)
 8000d10:	f7ff fd2a 	bl	8000768 <LCD_Send_String_Pos>
					HAL_Delay(3000);
 8000d14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d18:	f000 fc24 	bl	8001564 <HAL_Delay>
					LCD_Send_String_Pos("Check password", 1, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <Password_Task+0xf4>)
 8000d22:	f7ff fd21 	bl	8000768 <LCD_Send_String_Pos>
					LCDPassPos=1;
 8000d26:	2301      	movs	r3, #1
 8000d28:	75fb      	strb	r3, [r7, #23]
					enteredPassword[0]=0;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <Password_Task+0xfc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
					enteredPassword[1]=0;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <Password_Task+0xfc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	705a      	strb	r2, [r3, #1]
					enteredPassword[2]=0;
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <Password_Task+0xfc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	709a      	strb	r2, [r3, #2]
					enteredPassword[3]=0;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <Password_Task+0xfc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	70da      	strb	r2, [r3, #3]
	  LCD_Send_String_Pos("Check password", 1, 1);
 8000d42:	e78f      	b.n	8000c64 <Password_Task+0x14>
 8000d44:	080075cc 	.word	0x080075cc
 8000d48:	20000078 	.word	0x20000078
 8000d4c:	20000060 	.word	0x20000060
 8000d50:	080075dc 	.word	0x080075dc
 8000d54:	080075f0 	.word	0x080075f0
 8000d58:	20000068 	.word	0x20000068
 8000d5c:	20000064 	.word	0x20000064
 8000d60:	08007600 	.word	0x08007600

08000d64 <Temperature_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Temperature_Task */
void Temperature_Task(void *argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Temperature_Task */
	BaseType_t RetVal=pdFALSE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
	uint32_t Temp=0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start_IT(&hadc1);
 8000d74:	4824      	ldr	r0, [pc, #144]	; (8000e08 <Temperature_Task+0xa4>)
 8000d76:	f000 fcf1 	bl	800175c <HAL_ADC_Start_IT>
	  //HAL_ADC_Start_IT(&hadc1);
	  RetVal = xQueueReceive(TempQueueHandle, &Temp, portMAX_DELAY);
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <Temperature_Task+0xa8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f107 0108 	add.w	r1, r7, #8
 8000d82:	f04f 32ff 	mov.w	r2, #4294967295
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 ff5e 	bl	8004c48 <xQueueReceive>
 8000d8c:	60f8      	str	r0, [r7, #12]
	  if(RetVal == pdTRUE)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d134      	bne.n	8000dfe <Temperature_Task+0x9a>
	  {
			osSemaphoreAcquire(LCD_SemaphoerHandle,portMAX_DELAY);
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <Temperature_Task+0xac>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 ff95 	bl	8003ccc <osSemaphoreAcquire>
			LCD_Send_String_Pos("Temp: ", 1, 1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2101      	movs	r1, #1
 8000da6:	481b      	ldr	r0, [pc, #108]	; (8000e14 <Temperature_Task+0xb0>)
 8000da8:	f7ff fcde 	bl	8000768 <LCD_Send_String_Pos>
			LCD_Send_Number_Pos(Temp / 80, 2, 1);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4a1a      	ldr	r2, [pc, #104]	; (8000e18 <Temperature_Task+0xb4>)
 8000db0:	fba2 2303 	umull	r2, r3, r2, r3
 8000db4:	099b      	lsrs	r3, r3, #6
 8000db6:	2201      	movs	r2, #1
 8000db8:	2102      	movs	r1, #2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fd30 	bl	8000820 <LCD_Send_Number_Pos>

			Temp = Temp / 80;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <Temperature_Task+0xb4>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	099b      	lsrs	r3, r3, #6
 8000dca:	60bb      	str	r3, [r7, #8]
			if (Temp > 35) {
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b23      	cmp	r3, #35	; 0x23
 8000dd0:	d903      	bls.n	8000dda <Temperature_Task+0x76>
				FanSpeed(FAN_MAX_SPEED);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 f8da 	bl	8000f8c <FanSpeed>
 8000dd8:	e00c      	b.n	8000df4 <Temperature_Task+0x90>
			} else if (Temp > 20 && Temp < 35) {
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b14      	cmp	r3, #20
 8000dde:	d906      	bls.n	8000dee <Temperature_Task+0x8a>
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b22      	cmp	r3, #34	; 0x22
 8000de4:	d803      	bhi.n	8000dee <Temperature_Task+0x8a>
				FanSpeed(FAN_HAIF_SPEED);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 f8d0 	bl	8000f8c <FanSpeed>
			} else if (Temp > 20 && Temp < 35) {
 8000dec:	e002      	b.n	8000df4 <Temperature_Task+0x90>
			} else {
				FanSpeed(FAN_LOW_SPEED);
 8000dee:	2002      	movs	r0, #2
 8000df0:	f000 f8cc 	bl	8000f8c <FanSpeed>
			}
			osSemaphoreRelease(LCD_SemaphoerHandle);
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <Temperature_Task+0xac>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 ffcd 	bl	8003d98 <osSemaphoreRelease>
	  }
	  else
	  {

	  }
      osDelay(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f002 fe48 	bl	8003a94 <osDelay>
	  HAL_ADC_Start_IT(&hadc1);
 8000e04:	e7b6      	b.n	8000d74 <Temperature_Task+0x10>
 8000e06:	bf00      	nop
 8000e08:	20000030 	.word	0x20000030
 8000e0c:	2000007c 	.word	0x2000007c
 8000e10:	20000084 	.word	0x20000084
 8000e14:	08007610 	.word	0x08007610
 8000e18:	cccccccd 	.word	0xcccccccd

08000e1c <Light_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Light_Task */
void Light_Task(void *argument)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Light_Task */
	BaseType_t RetVal=pdFALSE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
	uint32_t Gas=0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  //HAL_ADC_Start_IT(&hadc1);
	  RetVal = xQueueReceive(GasQueueHandle, &Gas, portMAX_DELAY);
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <Light_Task+0x88>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f107 0108 	add.w	r1, r7, #8
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 ff05 	bl	8004c48 <xQueueReceive>
 8000e3e:	60f8      	str	r0, [r7, #12]
	  if(RetVal == pdTRUE)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d129      	bne.n	8000e9a <Light_Task+0x7e>
	  {
		  osSemaphoreAcquire(LCD_SemaphoerHandle,portMAX_DELAY);
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <Light_Task+0x8c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 ff3c 	bl	8003ccc <osSemaphoreAcquire>

		  LCD_Send_String_Pos("Gas:      ", 1, 7);
 8000e54:	2207      	movs	r2, #7
 8000e56:	2101      	movs	r1, #1
 8000e58:	4814      	ldr	r0, [pc, #80]	; (8000eac <Light_Task+0x90>)
 8000e5a:	f7ff fc85 	bl	8000768 <LCD_Send_String_Pos>
		  LCD_Send_Number_Pos(Gas / 15, 2, 7);
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <Light_Task+0x94>)
 8000e62:	fba2 2303 	umull	r2, r3, r2, r3
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	2207      	movs	r2, #7
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcd7 	bl	8000820 <LCD_Send_Number_Pos>
		  Gas = Gas / 15;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <Light_Task+0x94>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	08db      	lsrs	r3, r3, #3
 8000e7c:	60bb      	str	r3, [r7, #8]
		  if(Gas>200)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	2bc8      	cmp	r3, #200	; 0xc8
 8000e82:	d905      	bls.n	8000e90 <Light_Task+0x74>
		  {
			  xEventGroupSetBits(windowHandle,0x01);
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <Light_Task+0x98>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 f9b2 	bl	80041f4 <xEventGroupSetBits>
		  }
		  osSemaphoreRelease(LCD_SemaphoerHandle);
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <Light_Task+0x8c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 ff7f 	bl	8003d98 <osSemaphoreRelease>
	  }
	  else
	  {

	  }
	  osDelay(100);
 8000e9a:	2064      	movs	r0, #100	; 0x64
 8000e9c:	f002 fdfa 	bl	8003a94 <osDelay>
	  RetVal = xQueueReceive(GasQueueHandle, &Gas, portMAX_DELAY);
 8000ea0:	e7c4      	b.n	8000e2c <Light_Task+0x10>
 8000ea2:	bf00      	nop
 8000ea4:	20000080 	.word	0x20000080
 8000ea8:	20000084 	.word	0x20000084
 8000eac:	08007618 	.word	0x08007618
 8000eb0:	88888889 	.word	0x88888889
 8000eb4:	20000088 	.word	0x20000088

08000eb8 <Window_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Window_Task */
void Window_Task(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Window_Task */
	BaseType_t RetVal=pdFALSE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
	uint32_t Gas=0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
	EventBits_t uxBits;
  /* Infinite loop */
  for(;;)
  {
		uxBits = xEventGroupWaitBits(windowHandle, 0x01, pdTRUE, pdTRUE,
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <Window_Task+0x74>)
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	f003 f8be 	bl	8004058 <xEventGroupWaitBits>
 8000edc:	60f8      	str	r0, [r7, #12]
				portMAX_DELAY);
		if(uxBits & 1)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0ef      	beq.n	8000ec8 <Window_Task+0x10>
		{
			osSemaphoreAcquire(LCD_SemaphoerHandle, portMAX_DELAY);
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <Window_Task+0x78>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 feeb 	bl	8003ccc <osSemaphoreAcquire>
			HAL_Delay(500);
 8000ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000efa:	f000 fb33 	bl	8001564 <HAL_Delay>
			LCD_Send_String_Pos("gas leakage      ", 1, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2101      	movs	r1, #1
 8000f02:	480c      	ldr	r0, [pc, #48]	; (8000f34 <Window_Task+0x7c>)
 8000f04:	f7ff fc30 	bl	8000768 <LCD_Send_String_Pos>
			LCD_Send_String_Pos("Window is opened", 2, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <Window_Task+0x80>)
 8000f0e:	f7ff fc2b 	bl	8000768 <LCD_Send_String_Pos>
			HAL_Delay(2500);
 8000f12:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000f16:	f000 fb25 	bl	8001564 <HAL_Delay>
			LCD_Send_Command(_LCD_CLEAR);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f7ff fac5 	bl	80004aa <LCD_Send_Command>
			osSemaphoreRelease(LCD_SemaphoerHandle);
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <Window_Task+0x78>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 ff37 	bl	8003d98 <osSemaphoreRelease>
		uxBits = xEventGroupWaitBits(windowHandle, 0x01, pdTRUE, pdTRUE,
 8000f2a:	e7cd      	b.n	8000ec8 <Window_Task+0x10>
 8000f2c:	20000088 	.word	0x20000088
 8000f30:	20000084 	.word	0x20000084
 8000f34:	08007624 	.word	0x08007624
 8000f38:	08007638 	.word	0x08007638

08000f3c <CheckPassword>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
uint8_t CheckPassword(uint8_t* ptAPassword)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	uint8_t CheckVar=0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
	for(uint8_t counter=0;counter<4;counter++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73bb      	strb	r3, [r7, #14]
 8000f4c:	e00e      	b.n	8000f6c <CheckPassword+0x30>
	{
		if(ptAPassword[counter] == correctPasword[counter])
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
 8000f58:	490b      	ldr	r1, [pc, #44]	; (8000f88 <CheckPassword+0x4c>)
 8000f5a:	5ccb      	ldrb	r3, [r1, r3]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d102      	bne.n	8000f66 <CheckPassword+0x2a>
		{
			CheckVar++;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3301      	adds	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
	for(uint8_t counter=0;counter<4;counter++)
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	73bb      	strb	r3, [r7, #14]
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d9ed      	bls.n	8000f4e <CheckPassword+0x12>
		}
	}
	if(CheckVar == 4)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d101      	bne.n	8000f7c <CheckPassword+0x40>
	{
		return 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <CheckPassword+0x42>
	}
	else
	{
		return 0;
 8000f7c:	2300      	movs	r3, #0
	}
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000000 	.word	0x20000000

08000f8c <FanSpeed>:



void FanSpeed(fanSpeed_t speed)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	switch (speed) {
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d010      	beq.n	8000fbe <FanSpeed+0x32>
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	dc13      	bgt.n	8000fc8 <FanSpeed+0x3c>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <FanSpeed+0x1e>
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d005      	beq.n	8000fb4 <FanSpeed+0x28>
		break;
	case FAN_LOW_SPEED:
		TIM1->CCR1 = 65535/35;
		break;
	}
}
 8000fa8:	e00e      	b.n	8000fc8 <FanSpeed+0x3c>
		TIM1->CCR1 = 65535;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <FanSpeed+0x48>)
 8000fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000fb2:	e009      	b.n	8000fc8 <FanSpeed+0x3c>
		TIM1->CCR1 = 65535/3;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <FanSpeed+0x48>)
 8000fb6:	f245 5255 	movw	r2, #21845	; 0x5555
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000fbc:	e004      	b.n	8000fc8 <FanSpeed+0x3c>
		TIM1->CCR1 = 65535/35;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <FanSpeed+0x48>)
 8000fc0:	f44f 62ea 	mov.w	r2, #1872	; 0x750
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000fc6:	bf00      	nop
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40012c00 	.word	0x40012c00

08000fd8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_GPIO_Init+0x64>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_GPIO_Init+0x64>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_GPIO_Init+0x64>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <MX_GPIO_Init+0x64>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <MX_GPIO_Init+0x64>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_GPIO_Init+0x64>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800101c:	2338      	movs	r3, #56	; 0x38
 800101e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4619      	mov	r1, r3
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_GPIO_Init+0x68>)
 8001030:	f000 ffc8 	bl	8001fc4 <HAL_GPIO_Init>

}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	40010c00 	.word	0x40010c00

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104a:	f000 fa29 	bl	80014a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  int32_t CH1_DC = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
	//MRCC_voidInit();
	MRCC_voidPeripheralClockEnable(RCC_APB2,GPIO_A);
 8001052:	2102      	movs	r1, #2
 8001054:	2002      	movs	r0, #2
 8001056:	f7ff fc45 	bl	80008e4 <MRCC_voidPeripheralClockEnable>
	LCD_Init();
 800105a:	f7ff f9dd 	bl	8000418 <LCD_Init>
	HAL_Delay(100);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f000 fa80 	bl	8001564 <HAL_Delay>
	MX_TIM1_Init();
 8001064:	f000 f904 	bl	8001270 <MX_TIM1_Init>
	__HAL_RCC_TIM1_CLK_ENABLE();
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <main+0x64>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <main+0x64>)
 800106e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <main+0x64>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001080:	2100      	movs	r1, #0
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <main+0x68>)
 8001084:	f001 fe76 	bl	8002d74 <HAL_TIM_PWM_Start>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f812 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //HAL_ADC_Start_IT(&hadc2);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f7ff ffa4 	bl	8000fd8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001090:	f7ff fc62 	bl	8000958 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001094:	f000 f8ec 	bl	8001270 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001098:	f002 fbec 	bl	8003874 <osKernelInitialize>
  MX_FREERTOS_Init();
 800109c:	f7ff fcf0 	bl	8000a80 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010a0:	f002 fc1a 	bl	80038d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <main+0x60>
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	2000008c 	.word	0x2000008c

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 fa04 	bl	80074cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 f901 	bl	80022fc <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001100:	f000 f856 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fb6e 	bl	8002800 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800112a:	f000 f841 	bl	80011b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800112e:	2302      	movs	r3, #2
 8001130:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fcbd 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001144:	f000 f834 	bl	80011b0 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3750      	adds	r7, #80	; 0x50
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken;

	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
	uint32_t ADC_Result1 = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
	uint32_t ADC_Result2 = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]

		ADC_Result1 = HAL_ADC_GetValue(&hadc1);
 8001164:	480f      	ldr	r0, [pc, #60]	; (80011a4 <HAL_ADC_ConvCpltCallback+0x54>)
 8001166:	f000 fbaf 	bl	80018c8 <HAL_ADC_GetValue>
 800116a:	4603      	mov	r3, r0
 800116c:	613b      	str	r3, [r7, #16]
		xQueueSendToFrontFromISR(TempQueueHandle,(void*)&ADC_Result1,&xHigherPriorityTaskWoken);
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_ADC_ConvCpltCallback+0x58>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	f107 0214 	add.w	r2, r7, #20
 8001176:	f107 0110 	add.w	r1, r7, #16
 800117a:	2301      	movs	r3, #1
 800117c:	f003 fc3e 	bl	80049fc <xQueueGenericSendFromISR>

		ADC_Result2 = HAL_ADC_GetValue(&hadc1);
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <HAL_ADC_ConvCpltCallback+0x54>)
 8001182:	f000 fba1 	bl	80018c8 <HAL_ADC_GetValue>
 8001186:	4603      	mov	r3, r0
 8001188:	60fb      	str	r3, [r7, #12]

		xQueueSendToFrontFromISR(GasQueueHandle,(void*)&ADC_Result2,&xHigherPriorityTaskWoken);
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_ADC_ConvCpltCallback+0x5c>)
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	f107 0214 	add.w	r2, r7, #20
 8001192:	f107 010c 	add.w	r1, r7, #12
 8001196:	2301      	movs	r3, #1
 8001198:	f003 fc30 	bl	80049fc <xQueueGenericSendFromISR>




}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000030 	.word	0x20000030
 80011a8:	2000007c 	.word	0x2000007c
 80011ac:	20000080 	.word	0x20000080

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_MspInit+0x4c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6193      	str	r3, [r2, #24]
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_MspInit+0x4c>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_MspInit+0x4c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_MspInit+0x4c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	210f      	movs	r1, #15
 80011f6:	f06f 0001 	mvn.w	r0, #1
 80011fa:	f000 feac 	bl	8001f56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f977 	bl	800152c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800123e:	f005 f86b 	bl	8006318 <xTaskGetSchedulerState>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	d001      	beq.n	800124c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001248:	f005 fee6 	bl	8007018 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <ADC1_2_IRQHandler+0x10>)
 8001256:	f000 fb43 	bl	80018e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000030 	.word	0x20000030

08001264 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b096      	sub	sp, #88	; 0x58
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f006 f90f 	bl	80074cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <MX_TIM1_Init+0x138>)
 80012b0:	4a3e      	ldr	r2, [pc, #248]	; (80013ac <MX_TIM1_Init+0x13c>)
 80012b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b4:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <MX_TIM1_Init+0x138>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <MX_TIM1_Init+0x138>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012c0:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <MX_TIM1_Init+0x138>)
 80012c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <MX_TIM1_Init+0x138>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <MX_TIM1_Init+0x138>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <MX_TIM1_Init+0x138>)
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012da:	4833      	ldr	r0, [pc, #204]	; (80013a8 <MX_TIM1_Init+0x138>)
 80012dc:	f001 fca2 	bl	8002c24 <HAL_TIM_Base_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012e6:	f7ff ff63 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f4:	4619      	mov	r1, r3
 80012f6:	482c      	ldr	r0, [pc, #176]	; (80013a8 <MX_TIM1_Init+0x138>)
 80012f8:	f001 fea0 	bl	800303c <HAL_TIM_ConfigClockSource>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001302:	f7ff ff55 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001306:	4828      	ldr	r0, [pc, #160]	; (80013a8 <MX_TIM1_Init+0x138>)
 8001308:	f001 fcdb 	bl	8002cc2 <HAL_TIM_PWM_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001312:	f7ff ff4d 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001322:	4619      	mov	r1, r3
 8001324:	4820      	ldr	r0, [pc, #128]	; (80013a8 <MX_TIM1_Init+0x138>)
 8001326:	f002 f9f5 	bl	8003714 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001330:	f7ff ff3e 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_TIM1_Init+0x138>)
 800135a:	f001 fdad 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001364:	f7ff ff24 	bl	80011b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <MX_TIM1_Init+0x138>)
 800138c:	f002 fa20 	bl	80037d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001396:	f7ff ff0b 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_TIM1_Init+0x138>)
 800139c:	f000 f826 	bl	80013ec <HAL_TIM_MspPostInit>

}
 80013a0:	bf00      	nop
 80013a2:	3758      	adds	r7, #88	; 0x58
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000008c 	.word	0x2000008c
 80013ac:	40012c00 	.word	0x40012c00

080013b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_TIM_Base_MspInit+0x34>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10b      	bne.n	80013da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_TIM_Base_MspInit+0x38>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_TIM_Base_MspInit+0x38>)
 80013c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013cc:	6193      	str	r3, [r2, #24]
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_TIM_Base_MspInit+0x38>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_TIM_MspPostInit+0x5c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d118      	bne.n	800143e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_TIM_MspPostInit+0x60>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_TIM_MspPostInit+0x60>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_TIM_MspPostInit+0x60>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2302      	movs	r3, #2
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <HAL_TIM_MspPostInit+0x64>)
 800143a:	f000 fdc3 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40021000 	.word	0x40021000
 8001450:	40010800 	.word	0x40010800

08001454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff ff06 	bl	8001264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480b      	ldr	r0, [pc, #44]	; (8001488 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800145a:	490c      	ldr	r1, [pc, #48]	; (800148c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <LoopFillZerobss+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001470:	4c09      	ldr	r4, [pc, #36]	; (8001498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f006 f82d 	bl	80074dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001482:	f7ff fddf 	bl	8001044 <main>
  bx lr
 8001486:	4770      	bx	lr
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001490:	080077ac 	.word	0x080077ac
  ldr r2, =_sbss
 8001494:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001498:	20001b08 	.word	0x20001b08

0800149c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <CAN1_RX1_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x28>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 fd45 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fe7e 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fd5d 	bl	8001faa <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 fd25 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000004 	.word	0x20000004
 8001524:	2000000c 	.word	0x2000000c
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_IncTick+0x20>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	2000000c 	.word	0x2000000c
 800154c:	200000d4 	.word	0x200000d4

08001550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_GetTick+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	200000d4 	.word	0x200000d4

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff fff0 	bl	8001550 <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffe0 	bl	8001550 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000000c 	.word	0x2000000c

080015ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0be      	b.n	800174c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fa04 	bl	80009f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fb8f 	bl	8001d14 <ADC_ConversionStop_Disable>
 80015f6:	4603      	mov	r3, r0
 80015f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 8099 	bne.w	800173a <HAL_ADC_Init+0x18e>
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 8095 	bne.w	800173a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001618:	f023 0302 	bic.w	r3, r3, #2
 800161c:	f043 0202 	orr.w	r2, r3, #2
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800162c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7b1b      	ldrb	r3, [r3, #12]
 8001632:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001634:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	4313      	orrs	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001644:	d003      	beq.n	800164e <HAL_ADC_Init+0xa2>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <HAL_ADC_Init+0xa8>
 800164e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001652:	e000      	b.n	8001656 <HAL_ADC_Init+0xaa>
 8001654:	2300      	movs	r3, #0
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7d1b      	ldrb	r3, [r3, #20]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d119      	bne.n	8001698 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7b1b      	ldrb	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	3b01      	subs	r3, #1
 8001672:	035a      	lsls	r2, r3, #13
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	e00b      	b.n	8001698 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	f043 0220 	orr.w	r2, r3, #32
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	4b28      	ldr	r3, [pc, #160]	; (8001754 <HAL_ADC_Init+0x1a8>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	430b      	orrs	r3, r1
 80016be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c8:	d003      	beq.n	80016d2 <HAL_ADC_Init+0x126>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d104      	bne.n	80016dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	051b      	lsls	r3, r3, #20
 80016da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_ADC_Init+0x1ac>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d10b      	bne.n	8001718 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	f023 0303 	bic.w	r3, r3, #3
 800170e:	f043 0201 	orr.w	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001716:	e018      	b.n	800174a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	f023 0312 	bic.w	r3, r3, #18
 8001720:	f043 0210 	orr.w	r2, r3, #16
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001738:	e007      	b.n	800174a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800174a:	7dfb      	ldrb	r3, [r7, #23]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	ffe1f7fd 	.word	0xffe1f7fd
 8001758:	ff1f0efe 	.word	0xff1f0efe

0800175c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_ADC_Start_IT+0x1a>
 8001772:	2302      	movs	r3, #2
 8001774:	e0a0      	b.n	80018b8 <HAL_ADC_Start_IT+0x15c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fa6e 	bl	8001c60 <ADC_Enable>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 808f 	bne.w	80018ae <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a45      	ldr	r2, [pc, #276]	; (80018c0 <HAL_ADC_Start_IT+0x164>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d105      	bne.n	80017ba <HAL_ADC_Start_IT+0x5e>
 80017ae:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <HAL_ADC_Start_IT+0x168>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d115      	bne.n	80017e6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d026      	beq.n	8001822 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017e4:	e01d      	b.n	8001822 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a33      	ldr	r2, [pc, #204]	; (80018c4 <HAL_ADC_Start_IT+0x168>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d004      	beq.n	8001806 <HAL_ADC_Start_IT+0xaa>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <HAL_ADC_Start_IT+0x164>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10d      	bne.n	8001822 <HAL_ADC_Start_IT+0xc6>
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_ADC_Start_IT+0x168>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800181a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	f023 0206 	bic.w	r2, r3, #6
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
 800183a:	e002      	b.n	8001842 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f06f 0202 	mvn.w	r2, #2
 8001852:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0220 	orr.w	r2, r2, #32
 8001862:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800186e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001872:	d113      	bne.n	800189c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001878:	4a11      	ldr	r2, [pc, #68]	; (80018c0 <HAL_ADC_Start_IT+0x164>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d105      	bne.n	800188a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_ADC_Start_IT+0x168>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001886:	2b00      	cmp	r3, #0
 8001888:	d108      	bne.n	800189c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	e00c      	b.n	80018b6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	e003      	b.n	80018b6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40012800 	.word	0x40012800
 80018c4:	40012400 	.word	0x40012400

080018c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d03e      	beq.n	8001980 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d039      	beq.n	8001980 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800192e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001932:	d11d      	bne.n	8001970 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001938:	2b00      	cmp	r3, #0
 800193a:	d119      	bne.n	8001970 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0220 	bic.w	r2, r2, #32
 800194a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fbed 	bl	8001150 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f06f 0212 	mvn.w	r2, #18
 800197e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001986:	2b00      	cmp	r3, #0
 8001988:	d04d      	beq.n	8001a26 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d048      	beq.n	8001a26 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80019b6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80019ba:	d012      	beq.n	80019e2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d125      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019d8:	d11d      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d119      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f9bd 	bl	8001d96 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 020c 	mvn.w	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d012      	beq.n	8001a56 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00d      	beq.n	8001a56 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f809 	bl	8001a5e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0201 	mvn.w	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x20>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0dc      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x1da>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d81c      	bhi.n	8001ada <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b05      	subs	r3, #5
 8001ab2:	221f      	movs	r2, #31
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4019      	ands	r1, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b05      	subs	r3, #5
 8001acc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad8:	e03c      	b.n	8001b54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d81c      	bhi.n	8001b1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	3b23      	subs	r3, #35	; 0x23
 8001af4:	221f      	movs	r2, #31
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	4019      	ands	r1, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b23      	subs	r3, #35	; 0x23
 8001b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1a:	e01b      	b.n	8001b54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3b41      	subs	r3, #65	; 0x41
 8001b2e:	221f      	movs	r2, #31
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4019      	ands	r1, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3b41      	subs	r3, #65	; 0x41
 8001b48:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d91c      	bls.n	8001b96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b1e      	subs	r3, #30
 8001b6e:	2207      	movs	r2, #7
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4019      	ands	r1, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6898      	ldr	r0, [r3, #8]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	3b1e      	subs	r3, #30
 8001b88:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	e019      	b.n	8001bca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6919      	ldr	r1, [r3, #16]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4019      	ands	r1, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6898      	ldr	r0, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d003      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bd6:	2b11      	cmp	r3, #17
 8001bd8:	d132      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_ADC_ConfigChannel+0x1e4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d125      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d126      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d11a      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	0c9a      	lsrs	r2, r3, #18
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c20:	e002      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f9      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x1b2>
 8001c2e:	e007      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	40012400 	.word	0x40012400
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d040      	beq.n	8001d00 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <ADC_Enable+0xac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <ADC_Enable+0xb0>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c9c:	e002      	b.n	8001ca4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001caa:	f7ff fc51 	bl	8001550 <HAL_GetTick>
 8001cae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cb0:	e01f      	b.n	8001cf2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cb2:	f7ff fc4d 	bl	8001550 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d918      	bls.n	8001cf2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d011      	beq.n	8001cf2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	f043 0210 	orr.w	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e007      	b.n	8001d02 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d1d8      	bne.n	8001cb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000004 	.word	0x20000004
 8001d10:	431bde83 	.word	0x431bde83

08001d14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d12e      	bne.n	8001d8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d3e:	f7ff fc07 	bl	8001550 <HAL_GetTick>
 8001d42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d44:	e01b      	b.n	8001d7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d46:	f7ff fc03 	bl	8001550 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d914      	bls.n	8001d7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d10d      	bne.n	8001d7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	f043 0210 	orr.w	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	f043 0201 	orr.w	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e007      	b.n	8001d8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d0dc      	beq.n	8001d46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4906      	ldr	r1, [pc, #24]	; (8001e40 <__NVIC_EnableIRQ+0x34>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
         );
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f7ff ff90 	bl	8001e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff2d 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff42 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff90 	bl	8001e98 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5f 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff35 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffa2 	bl	8001efc <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b08b      	sub	sp, #44	; 0x2c
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	e169      	b.n	80022ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f040 8158 	bne.w	80022a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a9a      	ldr	r2, [pc, #616]	; (8002264 <HAL_GPIO_Init+0x2a0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d05e      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 8002000:	4a98      	ldr	r2, [pc, #608]	; (8002264 <HAL_GPIO_Init+0x2a0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d875      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 8002006:	4a98      	ldr	r2, [pc, #608]	; (8002268 <HAL_GPIO_Init+0x2a4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d058      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 800200c:	4a96      	ldr	r2, [pc, #600]	; (8002268 <HAL_GPIO_Init+0x2a4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d86f      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 8002012:	4a96      	ldr	r2, [pc, #600]	; (800226c <HAL_GPIO_Init+0x2a8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d052      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 8002018:	4a94      	ldr	r2, [pc, #592]	; (800226c <HAL_GPIO_Init+0x2a8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d869      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 800201e:	4a94      	ldr	r2, [pc, #592]	; (8002270 <HAL_GPIO_Init+0x2ac>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d04c      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 8002024:	4a92      	ldr	r2, [pc, #584]	; (8002270 <HAL_GPIO_Init+0x2ac>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d863      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 800202a:	4a92      	ldr	r2, [pc, #584]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d046      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 8002030:	4a90      	ldr	r2, [pc, #576]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d85d      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 8002036:	2b12      	cmp	r3, #18
 8002038:	d82a      	bhi.n	8002090 <HAL_GPIO_Init+0xcc>
 800203a:	2b12      	cmp	r3, #18
 800203c:	d859      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <HAL_GPIO_Init+0x80>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	080020bf 	.word	0x080020bf
 8002048:	08002099 	.word	0x08002099
 800204c:	080020ab 	.word	0x080020ab
 8002050:	080020ed 	.word	0x080020ed
 8002054:	080020f3 	.word	0x080020f3
 8002058:	080020f3 	.word	0x080020f3
 800205c:	080020f3 	.word	0x080020f3
 8002060:	080020f3 	.word	0x080020f3
 8002064:	080020f3 	.word	0x080020f3
 8002068:	080020f3 	.word	0x080020f3
 800206c:	080020f3 	.word	0x080020f3
 8002070:	080020f3 	.word	0x080020f3
 8002074:	080020f3 	.word	0x080020f3
 8002078:	080020f3 	.word	0x080020f3
 800207c:	080020f3 	.word	0x080020f3
 8002080:	080020f3 	.word	0x080020f3
 8002084:	080020f3 	.word	0x080020f3
 8002088:	080020a1 	.word	0x080020a1
 800208c:	080020b5 	.word	0x080020b5
 8002090:	4a79      	ldr	r2, [pc, #484]	; (8002278 <HAL_GPIO_Init+0x2b4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002096:	e02c      	b.n	80020f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	623b      	str	r3, [r7, #32]
          break;
 800209e:	e029      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	3304      	adds	r3, #4
 80020a6:	623b      	str	r3, [r7, #32]
          break;
 80020a8:	e024      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	3308      	adds	r3, #8
 80020b0:	623b      	str	r3, [r7, #32]
          break;
 80020b2:	e01f      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	330c      	adds	r3, #12
 80020ba:	623b      	str	r3, [r7, #32]
          break;
 80020bc:	e01a      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020c6:	2304      	movs	r3, #4
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e013      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d4:	2308      	movs	r3, #8
 80020d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	611a      	str	r2, [r3, #16]
          break;
 80020de:	e009      	b.n	80020f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e0:	2308      	movs	r3, #8
 80020e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	615a      	str	r2, [r3, #20]
          break;
 80020ea:	e003      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
          break;
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          break;
 80020f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2bff      	cmp	r3, #255	; 0xff
 80020f8:	d801      	bhi.n	80020fe <HAL_GPIO_Init+0x13a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	e001      	b.n	8002102 <HAL_GPIO_Init+0x13e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3304      	adds	r3, #4
 8002102:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2bff      	cmp	r3, #255	; 0xff
 8002108:	d802      	bhi.n	8002110 <HAL_GPIO_Init+0x14c>
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	e002      	b.n	8002116 <HAL_GPIO_Init+0x152>
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	3b08      	subs	r3, #8
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	210f      	movs	r1, #15
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	401a      	ands	r2, r3
 8002128:	6a39      	ldr	r1, [r7, #32]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	431a      	orrs	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80b1 	beq.w	80022a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002144:	4b4d      	ldr	r3, [pc, #308]	; (800227c <HAL_GPIO_Init+0x2b8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a4c      	ldr	r2, [pc, #304]	; (800227c <HAL_GPIO_Init+0x2b8>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4b4a      	ldr	r3, [pc, #296]	; (800227c <HAL_GPIO_Init+0x2b8>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800215c:	4a48      	ldr	r2, [pc, #288]	; (8002280 <HAL_GPIO_Init+0x2bc>)
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4013      	ands	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a40      	ldr	r2, [pc, #256]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_GPIO_Init+0x1ec>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <HAL_GPIO_Init+0x2c4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1e8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3e      	ldr	r2, [pc, #248]	; (800228c <HAL_GPIO_Init+0x2c8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1e4>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <HAL_GPIO_Init+0x2cc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1e0>
 80021a0:	2303      	movs	r3, #3
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_Init+0x1ee>
 80021a4:	2304      	movs	r3, #4
 80021a6:	e004      	b.n	80021b2 <HAL_GPIO_Init+0x1ee>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_Init+0x1ee>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_GPIO_Init+0x1ee>
 80021b0:	2300      	movs	r3, #0
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	4093      	lsls	r3, r2
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021c2:	492f      	ldr	r1, [pc, #188]	; (8002280 <HAL_GPIO_Init+0x2bc>)
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	492c      	ldr	r1, [pc, #176]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4928      	ldr	r1, [pc, #160]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	4922      	ldr	r1, [pc, #136]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	60cb      	str	r3, [r1, #12]
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	43db      	mvns	r3, r3
 800221a:	491e      	ldr	r1, [pc, #120]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 800221c:	4013      	ands	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4918      	ldr	r1, [pc, #96]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	43db      	mvns	r3, r3
 8002242:	4914      	ldr	r1, [pc, #80]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 8002244:	4013      	ands	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d021      	beq.n	8002298 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_GPIO_Init+0x2d0>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
 8002260:	e021      	b.n	80022a6 <HAL_GPIO_Init+0x2e2>
 8002262:	bf00      	nop
 8002264:	10320000 	.word	0x10320000
 8002268:	10310000 	.word	0x10310000
 800226c:	10220000 	.word	0x10220000
 8002270:	10210000 	.word	0x10210000
 8002274:	10120000 	.word	0x10120000
 8002278:	10110000 	.word	0x10110000
 800227c:	40021000 	.word	0x40021000
 8002280:	40010000 	.word	0x40010000
 8002284:	40010800 	.word	0x40010800
 8002288:	40010c00 	.word	0x40010c00
 800228c:	40011000 	.word	0x40011000
 8002290:	40011400 	.word	0x40011400
 8002294:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_GPIO_Init+0x304>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	43db      	mvns	r3, r3
 80022a0:	4909      	ldr	r1, [pc, #36]	; (80022c8 <HAL_GPIO_Init+0x304>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	3301      	adds	r3, #1
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f47f ae8e 	bne.w	8001fd8 <HAL_GPIO_Init+0x14>
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	372c      	adds	r7, #44	; 0x2c
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	e001      	b.n	80022ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e272      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8087 	beq.w	800242a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800231c:	4b92      	ldr	r3, [pc, #584]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b04      	cmp	r3, #4
 8002326:	d00c      	beq.n	8002342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002328:	4b8f      	ldr	r3, [pc, #572]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d112      	bne.n	800235a <HAL_RCC_OscConfig+0x5e>
 8002334:	4b8c      	ldr	r3, [pc, #560]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002340:	d10b      	bne.n	800235a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002342:	4b89      	ldr	r3, [pc, #548]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d06c      	beq.n	8002428 <HAL_RCC_OscConfig+0x12c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d168      	bne.n	8002428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e24c      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x76>
 8002364:	4b80      	ldr	r3, [pc, #512]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a7f      	ldr	r2, [pc, #508]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	e02e      	b.n	80023d0 <HAL_RCC_OscConfig+0xd4>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x98>
 800237a:	4b7b      	ldr	r3, [pc, #492]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7a      	ldr	r2, [pc, #488]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b78      	ldr	r3, [pc, #480]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a77      	ldr	r2, [pc, #476]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e01d      	b.n	80023d0 <HAL_RCC_OscConfig+0xd4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0xbc>
 800239e:	4b72      	ldr	r3, [pc, #456]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a71      	ldr	r2, [pc, #452]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b6f      	ldr	r3, [pc, #444]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6e      	ldr	r2, [pc, #440]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0xd4>
 80023b8:	4b6b      	ldr	r3, [pc, #428]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a6a      	ldr	r2, [pc, #424]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b68      	ldr	r3, [pc, #416]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a67      	ldr	r2, [pc, #412]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff f8ba 	bl	8001550 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff f8b6 	bl	8001550 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e200      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0xe4>
 80023fe:	e014      	b.n	800242a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7ff f8a6 	bl	8001550 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002408:	f7ff f8a2 	bl	8001550 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e1ec      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x10c>
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d063      	beq.n	80024fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002436:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002442:	4b49      	ldr	r3, [pc, #292]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b08      	cmp	r3, #8
 800244c:	d11c      	bne.n	8002488 <HAL_RCC_OscConfig+0x18c>
 800244e:	4b46      	ldr	r3, [pc, #280]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d116      	bne.n	8002488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	4b43      	ldr	r3, [pc, #268]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_RCC_OscConfig+0x176>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e1c0      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4939      	ldr	r1, [pc, #228]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	e03a      	b.n	80024fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7ff f85b 	bl	8001550 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7ff f857 	bl	8001550 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e1a1      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4927      	ldr	r1, [pc, #156]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
 80024d0:	e015      	b.n	80024fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff f83a 	bl	8001550 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7ff f836 	bl	8001550 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e180      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d03a      	beq.n	8002580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d019      	beq.n	8002546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002518:	f7ff f81a 	bl	8001550 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002520:	f7ff f816 	bl	8001550 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e160      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800253e:	2001      	movs	r0, #1
 8002540:	f000 fa9c 	bl	8002a7c <RCC_Delay>
 8002544:	e01c      	b.n	8002580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7ff f800 	bl	8001550 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002552:	e00f      	b.n	8002574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002554:	f7fe fffc 	bl	8001550 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d908      	bls.n	8002574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e146      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	42420000 	.word	0x42420000
 8002570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1e9      	bne.n	8002554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a6 	beq.w	80026da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002592:	4b8b      	ldr	r3, [pc, #556]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10d      	bne.n	80025ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b88      	ldr	r3, [pc, #544]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a87      	ldr	r2, [pc, #540]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	61d3      	str	r3, [r2, #28]
 80025aa:	4b85      	ldr	r3, [pc, #532]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b82      	ldr	r3, [pc, #520]	; (80027c4 <HAL_RCC_OscConfig+0x4c8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d118      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c6:	4b7f      	ldr	r3, [pc, #508]	; (80027c4 <HAL_RCC_OscConfig+0x4c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7e      	ldr	r2, [pc, #504]	; (80027c4 <HAL_RCC_OscConfig+0x4c8>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d2:	f7fe ffbd 	bl	8001550 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025da:	f7fe ffb9 	bl	8001550 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b64      	cmp	r3, #100	; 0x64
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e103      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <HAL_RCC_OscConfig+0x4c8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x312>
 8002600:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4a6e      	ldr	r2, [pc, #440]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6213      	str	r3, [r2, #32]
 800260c:	e02d      	b.n	800266a <HAL_RCC_OscConfig+0x36e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x334>
 8002616:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a69      	ldr	r2, [pc, #420]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6213      	str	r3, [r2, #32]
 8002622:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a66      	ldr	r2, [pc, #408]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	e01c      	b.n	800266a <HAL_RCC_OscConfig+0x36e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b05      	cmp	r3, #5
 8002636:	d10c      	bne.n	8002652 <HAL_RCC_OscConfig+0x356>
 8002638:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4a60      	ldr	r2, [pc, #384]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	f043 0304 	orr.w	r3, r3, #4
 8002642:	6213      	str	r3, [r2, #32]
 8002644:	4b5e      	ldr	r3, [pc, #376]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a5d      	ldr	r2, [pc, #372]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	e00b      	b.n	800266a <HAL_RCC_OscConfig+0x36e>
 8002652:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	4a5a      	ldr	r2, [pc, #360]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	6213      	str	r3, [r2, #32]
 800265e:	4b58      	ldr	r3, [pc, #352]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a57      	ldr	r2, [pc, #348]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f023 0304 	bic.w	r3, r3, #4
 8002668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d015      	beq.n	800269e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002672:	f7fe ff6d 	bl	8001550 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe ff69 	bl	8001550 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	; 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0b1      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ee      	beq.n	800267a <HAL_RCC_OscConfig+0x37e>
 800269c:	e014      	b.n	80026c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269e:	f7fe ff57 	bl	8001550 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe ff53 	bl	8001550 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e09b      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026bc:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ee      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4a3b      	ldr	r2, [pc, #236]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8087 	beq.w	80027f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e4:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d061      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d146      	bne.n	8002786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f8:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_RCC_OscConfig+0x4cc>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe ff27 	bl	8001550 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002706:	f7fe ff23 	bl	8001550 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e06d      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d108      	bne.n	8002740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4921      	ldr	r1, [pc, #132]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002740:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a19      	ldr	r1, [r3, #32]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	430b      	orrs	r3, r1
 8002752:	491b      	ldr	r1, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x4cc>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fe fef7 	bl	8001550 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7fe fef3 	bl	8001550 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e03d      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x46a>
 8002784:	e035      	b.n	80027f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_RCC_OscConfig+0x4cc>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fee0 	bl	8001550 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fedc 	bl	8001550 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e026      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x498>
 80027b2:	e01e      	b.n	80027f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e019      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40007000 	.word	0x40007000
 80027c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_OscConfig+0x500>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0d0      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4965      	ldr	r1, [pc, #404]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b8      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800287e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	494d      	ldr	r1, [pc, #308]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d040      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d115      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e073      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e06b      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4936      	ldr	r1, [pc, #216]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fe2e 	bl	8001550 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fe fe2a 	bl	8001550 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e053      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d210      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 0207 	bic.w	r2, r3, #7
 8002936:	4922      	ldr	r1, [pc, #136]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e032      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4916      	ldr	r1, [pc, #88]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	490e      	ldr	r1, [pc, #56]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800298e:	f000 f821 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	490a      	ldr	r1, [pc, #40]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1cc>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1d0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fd8c 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08007780 	.word	0x08007780
 80029cc:	20000004 	.word	0x20000004
 80029d0:	20000008 	.word	0x20000008

080029d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x30>
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x36>
 8002a02:	e027      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a06:	613b      	str	r3, [r7, #16]
      break;
 8002a08:	e027      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d010      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0c5b      	lsrs	r3, r3, #17
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a36:	fb03 f202 	mul.w	r2, r3, r2
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e004      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	613b      	str	r3, [r7, #16]
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5a:	693b      	ldr	r3, [r7, #16]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	08007790 	.word	0x08007790
 8002a74:	080077a0 	.word	0x080077a0
 8002a78:	003d0900 	.word	0x003d0900

08002a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <RCC_Delay+0x34>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <RCC_Delay+0x38>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0a5b      	lsrs	r3, r3, #9
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a98:	bf00      	nop
  }
  while (Delay --);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	60fa      	str	r2, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f9      	bne.n	8002a98 <RCC_Delay+0x1c>
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	10624dd3 	.word	0x10624dd3

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d07d      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10d      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	4a4b      	ldr	r2, [pc, #300]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aee:	61d3      	str	r3, [r2, #28]
 8002af0:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afc:	2301      	movs	r3, #1
 8002afe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d118      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a42      	ldr	r2, [pc, #264]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b18:	f7fe fd1a 	bl	8001550 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	e008      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7fe fd16 	bl	8001550 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e06d      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d02e      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d027      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b66:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b72:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d014      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe fce5 	bl	8001550 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe fce1 	bl	8001550 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e036      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ee      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4917      	ldr	r1, [pc, #92]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	490b      	ldr	r1, [pc, #44]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	42420440 	.word	0x42420440

08002c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e041      	b.n	8002cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe fbb0 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 fab2 	bl	80031cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e041      	b.n	8002d58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f839 	bl	8002d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f000 fa63 	bl	80031cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_TIM_PWM_Start+0x24>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e022      	b.n	8002dde <HAL_TIM_PWM_Start+0x6a>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d109      	bne.n	8002db2 <HAL_TIM_PWM_Start+0x3e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e015      	b.n	8002dde <HAL_TIM_PWM_Start+0x6a>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d109      	bne.n	8002dcc <HAL_TIM_PWM_Start+0x58>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e008      	b.n	8002dde <HAL_TIM_PWM_Start+0x6a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e05e      	b.n	8002ea4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Start+0x82>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df4:	e013      	b.n	8002e1e <HAL_TIM_PWM_Start+0xaa>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_PWM_Start+0x92>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e04:	e00b      	b.n	8002e1e <HAL_TIM_PWM_Start+0xaa>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_PWM_Start+0xa2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e14:	e003      	b.n	8002e1e <HAL_TIM_PWM_Start+0xaa>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2201      	movs	r2, #1
 8002e24:	6839      	ldr	r1, [r7, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fc50 	bl	80036cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_TIM_PWM_Start+0x138>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d107      	bne.n	8002e46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <HAL_TIM_PWM_Start+0x138>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_TIM_PWM_Start+0xfa>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d009      	beq.n	8002e6e <HAL_TIM_PWM_Start+0xfa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <HAL_TIM_PWM_Start+0x13c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_TIM_PWM_Start+0xfa>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <HAL_TIM_PWM_Start+0x140>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d111      	bne.n	8002e92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b06      	cmp	r3, #6
 8002e7e:	d010      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e90:	e007      	b.n	8002ea2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800

08002eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0ae      	b.n	8003034 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	f200 809f 	bhi.w	8003024 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08003025 	.word	0x08003025
 8002ef4:	08003025 	.word	0x08003025
 8002ef8:	08003025 	.word	0x08003025
 8002efc:	08002f61 	.word	0x08002f61
 8002f00:	08003025 	.word	0x08003025
 8002f04:	08003025 	.word	0x08003025
 8002f08:	08003025 	.word	0x08003025
 8002f0c:	08002fa3 	.word	0x08002fa3
 8002f10:	08003025 	.word	0x08003025
 8002f14:	08003025 	.word	0x08003025
 8002f18:	08003025 	.word	0x08003025
 8002f1c:	08002fe3 	.word	0x08002fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f9b2 	bl	8003290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0208 	orr.w	r2, r2, #8
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	619a      	str	r2, [r3, #24]
      break;
 8002f5e:	e064      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f9f8 	bl	800335c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6999      	ldr	r1, [r3, #24]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	619a      	str	r2, [r3, #24]
      break;
 8002fa0:	e043      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa41 	bl	8003430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0208 	orr.w	r2, r2, #8
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0204 	bic.w	r2, r2, #4
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	61da      	str	r2, [r3, #28]
      break;
 8002fe0:	e023      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fa8b 	bl	8003504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69d9      	ldr	r1, [r3, #28]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	61da      	str	r2, [r3, #28]
      break;
 8003022:	e002      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
      break;
 8003028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_TIM_ConfigClockSource+0x1c>
 8003054:	2302      	movs	r3, #2
 8003056:	e0b4      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x186>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003090:	d03e      	beq.n	8003110 <HAL_TIM_ConfigClockSource+0xd4>
 8003092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003096:	f200 8087 	bhi.w	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	f000 8086 	beq.w	80031ae <HAL_TIM_ConfigClockSource+0x172>
 80030a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a6:	d87f      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b70      	cmp	r3, #112	; 0x70
 80030aa:	d01a      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0xa6>
 80030ac:	2b70      	cmp	r3, #112	; 0x70
 80030ae:	d87b      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b60      	cmp	r3, #96	; 0x60
 80030b2:	d050      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x11a>
 80030b4:	2b60      	cmp	r3, #96	; 0x60
 80030b6:	d877      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b50      	cmp	r3, #80	; 0x50
 80030ba:	d03c      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0xfa>
 80030bc:	2b50      	cmp	r3, #80	; 0x50
 80030be:	d873      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d058      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0x13a>
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d86f      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b30      	cmp	r3, #48	; 0x30
 80030ca:	d064      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x15a>
 80030cc:	2b30      	cmp	r3, #48	; 0x30
 80030ce:	d86b      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d060      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x15a>
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d867      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d05c      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x15a>
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d05a      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x15a>
 80030e0:	e062      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030f2:	f000 facc 	bl	800368e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	609a      	str	r2, [r3, #8]
      break;
 800310e:	e04f      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003120:	f000 fab5 	bl	800368e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003132:	609a      	str	r2, [r3, #8]
      break;
 8003134:	e03c      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003142:	461a      	mov	r2, r3
 8003144:	f000 fa2c 	bl	80035a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2150      	movs	r1, #80	; 0x50
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fa83 	bl	800365a <TIM_ITRx_SetConfig>
      break;
 8003154:	e02c      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003162:	461a      	mov	r2, r3
 8003164:	f000 fa4a 	bl	80035fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2160      	movs	r1, #96	; 0x60
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fa73 	bl	800365a <TIM_ITRx_SetConfig>
      break;
 8003174:	e01c      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003182:	461a      	mov	r2, r3
 8003184:	f000 fa0c 	bl	80035a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2140      	movs	r1, #64	; 0x40
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fa63 	bl	800365a <TIM_ITRx_SetConfig>
      break;
 8003194:	e00c      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f000 fa5a 	bl	800365a <TIM_ITRx_SetConfig>
      break;
 80031a6:	e003      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      break;
 80031ac:	e000      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a29      	ldr	r2, [pc, #164]	; (8003284 <TIM_Base_SetConfig+0xb8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00b      	beq.n	80031fc <TIM_Base_SetConfig+0x30>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ea:	d007      	beq.n	80031fc <TIM_Base_SetConfig+0x30>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a26      	ldr	r2, [pc, #152]	; (8003288 <TIM_Base_SetConfig+0xbc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_Base_SetConfig+0x30>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a25      	ldr	r2, [pc, #148]	; (800328c <TIM_Base_SetConfig+0xc0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <TIM_Base_SetConfig+0xb8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_Base_SetConfig+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d007      	beq.n	800322e <TIM_Base_SetConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <TIM_Base_SetConfig+0xbc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_Base_SetConfig+0x62>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <TIM_Base_SetConfig+0xc0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d108      	bne.n	8003240 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <TIM_Base_SetConfig+0xb8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d103      	bne.n	8003274 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	615a      	str	r2, [r3, #20]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800

08003290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f023 0201 	bic.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 0302 	bic.w	r3, r3, #2
 80032d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <TIM_OC1_SetConfig+0xc8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10c      	bne.n	8003306 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0308 	bic.w	r3, r3, #8
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <TIM_OC1_SetConfig+0xc8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d111      	bne.n	8003332 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800331c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	621a      	str	r2, [r3, #32]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40012c00 	.word	0x40012c00

0800335c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f023 0210 	bic.w	r2, r3, #16
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0320 	bic.w	r3, r3, #32
 80033a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a1d      	ldr	r2, [pc, #116]	; (800342c <TIM_OC2_SetConfig+0xd0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10d      	bne.n	80033d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a14      	ldr	r2, [pc, #80]	; (800342c <TIM_OC2_SetConfig+0xd0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d113      	bne.n	8003408 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	40012c00 	.word	0x40012c00

08003430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <TIM_OC3_SetConfig+0xd0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10d      	bne.n	80034aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <TIM_OC3_SetConfig+0xd0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d113      	bne.n	80034da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	621a      	str	r2, [r3, #32]
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40012c00 	.word	0x40012c00

08003504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800354e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	031b      	lsls	r3, r3, #12
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <TIM_OC4_SetConfig+0x98>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d109      	bne.n	8003578 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	019b      	lsls	r3, r3, #6
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00

080035a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0201 	bic.w	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f023 030a 	bic.w	r3, r3, #10
 80035dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0210 	bic.w	r2, r3, #16
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	031b      	lsls	r3, r3, #12
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003638:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	621a      	str	r2, [r3, #32]
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	f043 0307 	orr.w	r3, r3, #7
 800367c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	609a      	str	r2, [r3, #8]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800368e:	b480      	push	{r7}
 8003690:	b087      	sub	sp, #28
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	609a      	str	r2, [r3, #8]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2201      	movs	r2, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1a      	ldr	r2, [r3, #32]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	431a      	orrs	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003728:	2302      	movs	r3, #2
 800372a:	e046      	b.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d009      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a10      	ldr	r2, [pc, #64]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10c      	bne.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800

080037d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e03d      	b.n	8003868 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
	...

08003874 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800387a:	f3ef 8305 	mrs	r3, IPSR
 800387e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003880:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003886:	f3ef 8310 	mrs	r3, PRIMASK
 800388a:	607b      	str	r3, [r7, #4]
  return(result);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <osKernelInitialize+0x32>
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <osKernelInitialize+0x60>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d109      	bne.n	80038ae <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800389a:	f3ef 8311 	mrs	r3, BASEPRI
 800389e:	603b      	str	r3, [r7, #0]
  return(result);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80038a6:	f06f 0305 	mvn.w	r3, #5
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e00c      	b.n	80038c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <osKernelInitialize+0x60>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <osKernelInitialize+0x60>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e002      	b.n	80038c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80038c2:	f04f 33ff 	mov.w	r3, #4294967295
 80038c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80038c8:	68fb      	ldr	r3, [r7, #12]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	200000d8 	.word	0x200000d8

080038d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038de:	f3ef 8305 	mrs	r3, IPSR
 80038e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80038e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ea:	f3ef 8310 	mrs	r3, PRIMASK
 80038ee:	607b      	str	r3, [r7, #4]
  return(result);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <osKernelStart+0x32>
 80038f6:	4b11      	ldr	r3, [pc, #68]	; (800393c <osKernelStart+0x64>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d109      	bne.n	8003912 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003902:	603b      	str	r3, [r7, #0]
  return(result);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <osKernelStart+0x3a>
    stat = osErrorISR;
 800390a:	f06f 0305 	mvn.w	r3, #5
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	e00e      	b.n	8003930 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <osKernelStart+0x64>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <osKernelStart+0x64>)
 800391c:	2202      	movs	r2, #2
 800391e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003920:	f002 f810 	bl	8005944 <vTaskStartScheduler>
      stat = osOK;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e002      	b.n	8003930 <osKernelStart+0x58>
    } else {
      stat = osError;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003930:	68fb      	ldr	r3, [r7, #12]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200000d8 	.word	0x200000d8

08003940 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b092      	sub	sp, #72	; 0x48
 8003944:	af04      	add	r7, sp, #16
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003950:	f3ef 8305 	mrs	r3, IPSR
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003958:	2b00      	cmp	r3, #0
 800395a:	f040 8094 	bne.w	8003a86 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395e:	f3ef 8310 	mrs	r3, PRIMASK
 8003962:	623b      	str	r3, [r7, #32]
  return(result);
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 808d 	bne.w	8003a86 <osThreadNew+0x146>
 800396c:	4b48      	ldr	r3, [pc, #288]	; (8003a90 <osThreadNew+0x150>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d106      	bne.n	8003982 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003974:	f3ef 8311 	mrs	r3, BASEPRI
 8003978:	61fb      	str	r3, [r7, #28]
  return(result);
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f040 8082 	bne.w	8003a86 <osThreadNew+0x146>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d07e      	beq.n	8003a86 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003988:	2340      	movs	r3, #64	; 0x40
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800398c:	2318      	movs	r3, #24
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003990:	2300      	movs	r3, #0
 8003992:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003994:	f107 031b 	add.w	r3, r7, #27
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d045      	beq.n	8003a32 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <osThreadNew+0x74>
        name = attr->name;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <osThreadNew+0x9a>
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	2b38      	cmp	r3, #56	; 0x38
 80039cc:	d805      	bhi.n	80039da <osThreadNew+0x9a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <osThreadNew+0x9e>
        return (NULL);
 80039da:	2300      	movs	r3, #0
 80039dc:	e054      	b.n	8003a88 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00e      	beq.n	8003a14 <osThreadNew+0xd4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b5b      	cmp	r3, #91	; 0x5b
 80039fc:	d90a      	bls.n	8003a14 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <osThreadNew+0xd4>
        mem = 1;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a12:	e010      	b.n	8003a36 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10c      	bne.n	8003a36 <osThreadNew+0xf6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d108      	bne.n	8003a36 <osThreadNew+0xf6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <osThreadNew+0xf6>
          mem = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a30:	e001      	b.n	8003a36 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d110      	bne.n	8003a5e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a44:	9202      	str	r2, [sp, #8]
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f001 fd34 	bl	80054c0 <xTaskCreateStatic>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e013      	b.n	8003a86 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d110      	bne.n	8003a86 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	f107 0314 	add.w	r3, r7, #20
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f001 fd7e 	bl	8005578 <xTaskCreate>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d001      	beq.n	8003a86 <osThreadNew+0x146>
          hTask = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a86:	697b      	ldr	r3, [r7, #20]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3738      	adds	r7, #56	; 0x38
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	200000d8 	.word	0x200000d8

08003a94 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9c:	f3ef 8305 	mrs	r3, IPSR
 8003aa0:	613b      	str	r3, [r7, #16]
  return(result);
 8003aa2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10f      	bne.n	8003ac8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aac:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <osDelay+0x34>
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <osDelay+0x58>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d109      	bne.n	8003ad0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003abc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <osDelay+0x3c>
    stat = osErrorISR;
 8003ac8:	f06f 0305 	mvn.w	r3, #5
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e007      	b.n	8003ae0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f001 fe88 	bl	80057f0 <vTaskDelay>
    }
  }

  return (stat);
 8003ae0:	697b      	ldr	r3, [r7, #20]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200000d8 	.word	0x200000d8

08003af0 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003afc:	f3ef 8305 	mrs	r3, IPSR
 8003b00:	617b      	str	r3, [r7, #20]
  return(result);
 8003b02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d13d      	bne.n	8003b84 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b08:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0c:	613b      	str	r3, [r7, #16]
  return(result);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d137      	bne.n	8003b84 <osEventFlagsNew+0x94>
 8003b14:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <osEventFlagsNew+0xa0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d105      	bne.n	8003b28 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b20:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d12d      	bne.n	8003b84 <osEventFlagsNew+0x94>
    mem = -1;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d006      	beq.n	8003b4a <osEventFlagsNew+0x5a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b1f      	cmp	r3, #31
 8003b42:	d902      	bls.n	8003b4a <osEventFlagsNew+0x5a>
        mem = 1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	e00c      	b.n	8003b64 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d108      	bne.n	8003b64 <osEventFlagsNew+0x74>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <osEventFlagsNew+0x74>
          mem = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e001      	b.n	8003b64 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d106      	bne.n	8003b78 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fa20 	bl	8003fb4 <xEventGroupCreateStatic>
 8003b74:	61f8      	str	r0, [r7, #28]
 8003b76:	e005      	b.n	8003b84 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8003b7e:	f000 fa50 	bl	8004022 <xEventGroupCreate>
 8003b82:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003b84:	69fb      	ldr	r3, [r7, #28]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200000d8 	.word	0x200000d8

08003b94 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba4:	f3ef 8305 	mrs	r3, IPSR
 8003ba8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003baa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f040 8086 	bne.w	8003cbe <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb6:	617b      	str	r3, [r7, #20]
  return(result);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d17f      	bne.n	8003cbe <osSemaphoreNew+0x12a>
 8003bbe:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <osSemaphoreNew+0x134>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d105      	bne.n	8003bd2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bca:	613b      	str	r3, [r7, #16]
  return(result);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d175      	bne.n	8003cbe <osSemaphoreNew+0x12a>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d072      	beq.n	8003cbe <osSemaphoreNew+0x12a>
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d86e      	bhi.n	8003cbe <osSemaphoreNew+0x12a>
    mem = -1;
 8003be0:	f04f 33ff 	mov.w	r3, #4294967295
 8003be4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d015      	beq.n	8003c18 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d006      	beq.n	8003c02 <osSemaphoreNew+0x6e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b4f      	cmp	r3, #79	; 0x4f
 8003bfa:	d902      	bls.n	8003c02 <osSemaphoreNew+0x6e>
        mem = 1;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	623b      	str	r3, [r7, #32]
 8003c00:	e00c      	b.n	8003c1c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d108      	bne.n	8003c1c <osSemaphoreNew+0x88>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d104      	bne.n	8003c1c <osSemaphoreNew+0x88>
          mem = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	623b      	str	r3, [r7, #32]
 8003c16:	e001      	b.n	8003c1c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d04c      	beq.n	8003cbe <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d128      	bne.n	8003c7c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d10a      	bne.n	8003c46 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2203      	movs	r2, #3
 8003c36:	9200      	str	r2, [sp, #0]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f000 fc9d 	bl	800457c <xQueueGenericCreateStatic>
 8003c42:	6278      	str	r0, [r7, #36]	; 0x24
 8003c44:	e005      	b.n	8003c52 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003c46:	2203      	movs	r2, #3
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f000 fd0d 	bl	800466a <xQueueGenericCreate>
 8003c50:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d022      	beq.n	8003c9e <osSemaphoreNew+0x10a>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01f      	beq.n	8003c9e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2200      	movs	r2, #0
 8003c62:	2100      	movs	r1, #0
 8003c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c66:	f000 fdcb 	bl	8004800 <xQueueGenericSend>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d016      	beq.n	8003c9e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c72:	f001 fa55 	bl	8005120 <vQueueDelete>
            hSemaphore = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7a:	e010      	b.n	8003c9e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d108      	bne.n	8003c94 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fd4e 	bl	800472c <xQueueCreateCountingSemaphoreStatic>
 8003c90:	6278      	str	r0, [r7, #36]	; 0x24
 8003c92:	e004      	b.n	8003c9e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fd7f 	bl	800479a <xQueueCreateCountingSemaphore>
 8003c9c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00c      	beq.n	8003cbe <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <osSemaphoreNew+0x11e>
          name = attr->name;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	e001      	b.n	8003cb6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003cb6:	69f9      	ldr	r1, [r7, #28]
 8003cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cba:	f001 fb7b 	bl	80053b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200000d8 	.word	0x200000d8

08003ccc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d103      	bne.n	8003cec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003ce4:	f06f 0303 	mvn.w	r3, #3
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	e04b      	b.n	8003d84 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cec:	f3ef 8305 	mrs	r3, IPSR
 8003cf0:	617b      	str	r3, [r7, #20]
  return(result);
 8003cf2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfc:	613b      	str	r3, [r7, #16]
  return(result);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <osSemaphoreAcquire+0x4c>
 8003d04:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <osSemaphoreAcquire+0xc4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d128      	bne.n	8003d5e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8003d10:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d022      	beq.n	8003d5e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003d1e:	f06f 0303 	mvn.w	r3, #3
 8003d22:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003d24:	e02d      	b.n	8003d82 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003d2a:	f107 0308 	add.w	r3, r7, #8
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2100      	movs	r1, #0
 8003d32:	69b8      	ldr	r0, [r7, #24]
 8003d34:	f001 f974 	bl	8005020 <xQueueReceiveFromISR>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d003      	beq.n	8003d46 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003d3e:	f06f 0302 	mvn.w	r3, #2
 8003d42:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003d44:	e01d      	b.n	8003d82 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01a      	beq.n	8003d82 <osSemaphoreAcquire+0xb6>
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <osSemaphoreAcquire+0xc8>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003d5c:	e011      	b.n	8003d82 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003d5e:	6839      	ldr	r1, [r7, #0]
 8003d60:	69b8      	ldr	r0, [r7, #24]
 8003d62:	f001 f851 	bl	8004e08 <xQueueSemaphoreTake>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d00b      	beq.n	8003d84 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003d72:	f06f 0301 	mvn.w	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	e004      	b.n	8003d84 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003d7a:	f06f 0302 	mvn.w	r3, #2
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	e000      	b.n	8003d84 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003d82:	bf00      	nop
      }
    }
  }

  return (stat);
 8003d84:	69fb      	ldr	r3, [r7, #28]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200000d8 	.word	0x200000d8
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003dae:	f06f 0303 	mvn.w	r3, #3
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e03e      	b.n	8003e34 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003db6:	f3ef 8305 	mrs	r3, IPSR
 8003dba:	617b      	str	r3, [r7, #20]
  return(result);
 8003dbc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10f      	bne.n	8003de2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc6:	613b      	str	r3, [r7, #16]
  return(result);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <osSemaphoreRelease+0x4a>
 8003dce:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <osSemaphoreRelease+0xa8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d120      	bne.n	8003e18 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8003dda:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01a      	beq.n	8003e18 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003de6:	f107 0308 	add.w	r3, r7, #8
 8003dea:	4619      	mov	r1, r3
 8003dec:	69b8      	ldr	r0, [r7, #24]
 8003dee:	f000 fe9d 	bl	8004b2c <xQueueGiveFromISR>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d003      	beq.n	8003e00 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003df8:	f06f 0302 	mvn.w	r3, #2
 8003dfc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003dfe:	e018      	b.n	8003e32 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d015      	beq.n	8003e32 <osSemaphoreRelease+0x9a>
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <osSemaphoreRelease+0xac>)
 8003e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e16:	e00c      	b.n	8003e32 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	69b8      	ldr	r0, [r7, #24]
 8003e20:	f000 fcee 	bl	8004800 <xQueueGenericSend>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d004      	beq.n	8003e34 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003e2a:	f06f 0302 	mvn.w	r3, #2
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	e000      	b.n	8003e34 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e32:	bf00      	nop
    }
  }

  return (stat);
 8003e34:	69fb      	ldr	r3, [r7, #28]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200000d8 	.word	0x200000d8
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e58:	f3ef 8305 	mrs	r3, IPSR
 8003e5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e5e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d16f      	bne.n	8003f44 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e64:	f3ef 8310 	mrs	r3, PRIMASK
 8003e68:	617b      	str	r3, [r7, #20]
  return(result);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d169      	bne.n	8003f44 <osMessageQueueNew+0xfc>
 8003e70:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <osMessageQueueNew+0x108>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d105      	bne.n	8003e84 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e78:	f3ef 8311 	mrs	r3, BASEPRI
 8003e7c:	613b      	str	r3, [r7, #16]
  return(result);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d15f      	bne.n	8003f44 <osMessageQueueNew+0xfc>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d05c      	beq.n	8003f44 <osMessageQueueNew+0xfc>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d059      	beq.n	8003f44 <osMessageQueueNew+0xfc>
    mem = -1;
 8003e90:	f04f 33ff 	mov.w	r3, #4294967295
 8003e94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d029      	beq.n	8003ef0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <osMessageQueueNew+0x82>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b4f      	cmp	r3, #79	; 0x4f
 8003eaa:	d90e      	bls.n	8003eca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <osMessageQueueNew+0x82>
        mem = 1;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	623b      	str	r3, [r7, #32]
 8003ec8:	e014      	b.n	8003ef4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d110      	bne.n	8003ef4 <osMessageQueueNew+0xac>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d108      	bne.n	8003ef4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <osMessageQueueNew+0xac>
          mem = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	623b      	str	r3, [r7, #32]
 8003eee:	e001      	b.n	8003ef4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10b      	bne.n	8003f12 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2100      	movs	r1, #0
 8003f04:	9100      	str	r1, [sp, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fb37 	bl	800457c <xQueueGenericCreateStatic>
 8003f0e:	6278      	str	r0, [r7, #36]	; 0x24
 8003f10:	e008      	b.n	8003f24 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fba4 	bl	800466a <xQueueGenericCreate>
 8003f22:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00c      	beq.n	8003f44 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	e001      	b.n	8003f3c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003f3c:	69f9      	ldr	r1, [r7, #28]
 8003f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f40:	f001 fa38 	bl	80053b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3728      	adds	r7, #40	; 0x28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200000d8 	.word	0x200000d8

08003f54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a06      	ldr	r2, [pc, #24]	; (8003f7c <vApplicationGetIdleTaskMemory+0x28>)
 8003f64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	200000dc 	.word	0x200000dc
 8003f80:	20000138 	.word	0x20000138

08003f84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a06      	ldr	r2, [pc, #24]	; (8003fac <vApplicationGetTimerTaskMemory+0x28>)
 8003f94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4a05      	ldr	r2, [pc, #20]	; (8003fb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2280      	movs	r2, #128	; 0x80
 8003fa0:	601a      	str	r2, [r3, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	20000238 	.word	0x20000238
 8003fb0:	20000294 	.word	0x20000294

08003fb4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003fd8:	2320      	movs	r3, #32
 8003fda:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d00a      	beq.n	8003ff8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	60fb      	str	r3, [r7, #12]
}
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3304      	adds	r3, #4
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f99d 	bl	800434c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2201      	movs	r2, #1
 8004016:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004018:	697b      	ldr	r3, [r7, #20]
	}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004028:	2020      	movs	r0, #32
 800402a:	f003 f877 	bl	800711c <pvPortMalloc>
 800402e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f983 	bl	800434c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800404c:	687b      	ldr	r3, [r7, #4]
	}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b090      	sub	sp, #64	; 0x40
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800406e:	2300      	movs	r3, #0
 8004070:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xEventGroupWaitBits+0x36>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	623b      	str	r3, [r7, #32]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <xEventGroupWaitBits+0x56>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	61fb      	str	r3, [r7, #28]
}
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <xEventGroupWaitBits+0x72>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	61bb      	str	r3, [r7, #24]
}
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040ca:	f002 f925 	bl	8006318 <xTaskGetSchedulerState>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <xEventGroupWaitBits+0x82>
 80040d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <xEventGroupWaitBits+0x86>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <xEventGroupWaitBits+0x88>
 80040de:	2300      	movs	r3, #0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <xEventGroupWaitBits+0xa2>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	617b      	str	r3, [r7, #20]
}
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80040fa:	f001 fc89 	bl	8005a10 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80040fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800410a:	f000 f8fe 	bl	800430a <prvTestWaitCondition>
 800410e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800411a:	2300      	movs	r3, #0
 800411c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d028      	beq.n	8004176 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	43db      	mvns	r3, r3
 800412c:	401a      	ands	r2, r3
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e020      	b.n	8004176 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004136:	2b00      	cmp	r3, #0
 8004138:	d104      	bne.n	8004144 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	633b      	str	r3, [r7, #48]	; 0x30
 8004142:	e018      	b.n	8004176 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004162:	1d18      	adds	r0, r3, #4
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	4313      	orrs	r3, r2
 800416a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800416c:	4619      	mov	r1, r3
 800416e:	f001 fe47 	bl	8005e00 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004176:	f001 fc59 	bl	8005a2c <xTaskResumeAll>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800417c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800417e:	2b00      	cmp	r3, #0
 8004180:	d031      	beq.n	80041e6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <xEventGroupWaitBits+0x198>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004198:	f002 fa3e 	bl	8006618 <uxTaskResetEventItemValue>
 800419c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800419e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11a      	bne.n	80041de <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80041a8:	f002 feb8 	bl	8006f1c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041b8:	f000 f8a7 	bl	800430a <prvTestWaitCondition>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d006      	beq.n	80041d6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80041c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	401a      	ands	r2, r3
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80041da:	f002 fecf 	bl	8006f7c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80041e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3740      	adds	r7, #64	; 0x40
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08e      	sub	sp, #56	; 0x38
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80041fe:	2300      	movs	r3, #0
 8004200:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004206:	2300      	movs	r3, #0
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <xEventGroupSetBits+0x32>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	613b      	str	r3, [r7, #16]
}
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <xEventGroupSetBits+0x52>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	3304      	adds	r3, #4
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	3308      	adds	r3, #8
 8004250:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004252:	f001 fbdd 	bl	8005a10 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	431a      	orrs	r2, r3
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004268:	e03c      	b.n	80042e4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004276:	2300      	movs	r3, #0
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004280:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004288:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d108      	bne.n	80042a6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80042a0:	2301      	movs	r3, #1
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a4:	e008      	b.n	80042b8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d101      	bne.n	80042b8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d010      	beq.n	80042e0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80042c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042d8:	4619      	mov	r1, r3
 80042da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042dc:	f001 fe5c 	bl	8005f98 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80042e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1be      	bne.n	800426a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	43db      	mvns	r3, r3
 80042f4:	401a      	ands	r2, r3
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80042fa:	f001 fb97 	bl	8005a2c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	681b      	ldr	r3, [r3, #0]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3738      	adds	r7, #56	; 0x38
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800430a:	b480      	push	{r7}
 800430c:	b087      	sub	sp, #28
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800432a:	2301      	movs	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	e007      	b.n	8004340 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	d101      	bne.n	8004340 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004340:	697b      	ldr	r3, [r7, #20]
}
 8004342:	4618      	mov	r0, r3
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f103 0208 	add.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f04f 32ff 	mov.w	r2, #4294967295
 8004364:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f103 0208 	add.w	r2, r3, #8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f103 0208 	add.w	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	601a      	str	r2, [r3, #0]
}
 80043de:	bf00      	nop
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d103      	bne.n	8004408 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e00c      	b.n	8004422 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3308      	adds	r3, #8
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e002      	b.n	8004416 <vListInsert+0x2e>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	429a      	cmp	r2, r3
 8004420:	d2f6      	bcs.n	8004410 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6892      	ldr	r2, [r2, #8]
 800446e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6852      	ldr	r2, [r2, #4]
 8004478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d103      	bne.n	800448c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
	...

080044ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xQueueGenericReset+0x2a>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60bb      	str	r3, [r7, #8]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044d6:	f002 fd21 	bl	8006f1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	3b01      	subs	r3, #1
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	22ff      	movs	r2, #255	; 0xff
 8004522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d114      	bne.n	8004556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01a      	beq.n	800456a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3310      	adds	r3, #16
 8004538:	4618      	mov	r0, r3
 800453a:	f001 fcc9 	bl	8005ed0 <xTaskRemoveFromEventList>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d012      	beq.n	800456a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <xQueueGenericReset+0xcc>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	e009      	b.n	800456a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3310      	adds	r3, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fef6 	bl	800434c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fef1 	bl	800434c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800456a:	f002 fd07 	bl	8006f7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	; 0x38
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <xQueueGenericCreateStatic+0x52>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <xQueueGenericCreateStatic+0x56>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericCreateStatic+0x58>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <xQueueGenericCreateStatic+0x7e>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <xQueueGenericCreateStatic+0x82>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <xQueueGenericCreateStatic+0x84>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	61fb      	str	r3, [r7, #28]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800461a:	2350      	movs	r3, #80	; 0x50
 800461c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b50      	cmp	r3, #80	; 0x50
 8004622:	d00a      	beq.n	800463a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	61bb      	str	r3, [r7, #24]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00d      	beq.n	8004660 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800464c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f843 	bl	80046e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004662:	4618      	mov	r0, r3
 8004664:	3730      	adds	r7, #48	; 0x30
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800466a:	b580      	push	{r7, lr}
 800466c:	b08a      	sub	sp, #40	; 0x28
 800466e:	af02      	add	r7, sp, #8
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	4613      	mov	r3, r2
 8004676:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10a      	bne.n	8004694 <xQueueGenericCreate+0x2a>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	613b      	str	r3, [r7, #16]
}
 8004690:	bf00      	nop
 8004692:	e7fe      	b.n	8004692 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e004      	b.n	80046aa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3350      	adds	r3, #80	; 0x50
 80046ae:	4618      	mov	r0, r3
 80046b0:	f002 fd34 	bl	800711c <pvPortMalloc>
 80046b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00f      	beq.n	80046dc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	3350      	adds	r3, #80	; 0x50
 80046c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046ca:	79fa      	ldrb	r2, [r7, #7]
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f805 	bl	80046e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046dc:	69bb      	ldr	r3, [r7, #24]
	}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e002      	b.n	8004708 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004714:	2101      	movs	r1, #1
 8004716:	69b8      	ldr	r0, [r7, #24]
 8004718:	f7ff fec8 	bl	80044ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	; 0x28
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	61bb      	str	r3, [r7, #24]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	429a      	cmp	r2, r3
 800475a:	d90a      	bls.n	8004772 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	617b      	str	r3, [r7, #20]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004772:	2302      	movs	r3, #2
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	2100      	movs	r1, #0
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fefd 	bl	800457c <xQueueGenericCreateStatic>
 8004782:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004790:	69fb      	ldr	r3, [r7, #28]
	}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	613b      	str	r3, [r7, #16]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d90a      	bls.n	80047de <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60fb      	str	r3, [r7, #12]
}
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80047de:	2202      	movs	r2, #2
 80047e0:	2100      	movs	r1, #0
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff ff41 	bl	800466a <xQueueGenericCreate>
 80047e8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80047f6:	697b      	ldr	r3, [r7, #20]
	}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08e      	sub	sp, #56	; 0x38
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800480e:	2300      	movs	r3, #0
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <xQueueGenericSend+0x32>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d103      	bne.n	8004840 <xQueueGenericSend+0x40>
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <xQueueGenericSend+0x44>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <xQueueGenericSend+0x46>
 8004844:	2300      	movs	r3, #0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <xQueueGenericSend+0x60>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d103      	bne.n	800486e <xQueueGenericSend+0x6e>
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <xQueueGenericSend+0x72>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <xQueueGenericSend+0x74>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <xQueueGenericSend+0x8e>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	623b      	str	r3, [r7, #32]
}
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800488e:	f001 fd43 	bl	8006318 <xTaskGetSchedulerState>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <xQueueGenericSend+0x9e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <xQueueGenericSend+0xa2>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueGenericSend+0xa4>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xQueueGenericSend+0xbe>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	61fb      	str	r3, [r7, #28]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048be:	f002 fb2d 	bl	8006f1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <xQueueGenericSend+0xd4>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d129      	bne.n	8004928 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048da:	f000 fc5b 	bl	8005194 <prvCopyDataToQueue>
 80048de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d010      	beq.n	800490a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	3324      	adds	r3, #36	; 0x24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 faef 	bl	8005ed0 <xTaskRemoveFromEventList>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d013      	beq.n	8004920 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048f8:	4b3f      	ldr	r3, [pc, #252]	; (80049f8 <xQueueGenericSend+0x1f8>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	e00a      	b.n	8004920 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004910:	4b39      	ldr	r3, [pc, #228]	; (80049f8 <xQueueGenericSend+0x1f8>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004920:	f002 fb2c 	bl	8006f7c <vPortExitCritical>
				return pdPASS;
 8004924:	2301      	movs	r3, #1
 8004926:	e063      	b.n	80049f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800492e:	f002 fb25 	bl	8006f7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004932:	2300      	movs	r3, #0
 8004934:	e05c      	b.n	80049f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fb8b 	bl	800605c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004946:	2301      	movs	r3, #1
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800494a:	f002 fb17 	bl	8006f7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800494e:	f001 f85f 	bl	8005a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004952:	f002 fae3 	bl	8006f1c <vPortEnterCritical>
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800495c:	b25b      	sxtb	r3, r3
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d103      	bne.n	800496c <xQueueGenericSend+0x16c>
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004972:	b25b      	sxtb	r3, r3
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d103      	bne.n	8004982 <xQueueGenericSend+0x182>
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004982:	f002 fafb 	bl	8006f7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004986:	1d3a      	adds	r2, r7, #4
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fb7a 	bl	8006088 <xTaskCheckForTimeOut>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d124      	bne.n	80049e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800499a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800499c:	f000 fcf2 	bl	8005384 <prvIsQueueFull>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d018      	beq.n	80049d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	3310      	adds	r3, #16
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f001 fa02 	bl	8005db8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b6:	f000 fc7d 	bl	80052b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049ba:	f001 f837 	bl	8005a2c <xTaskResumeAll>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f47f af7c 	bne.w	80048be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <xQueueGenericSend+0x1f8>)
 80049c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	e772      	b.n	80048be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049da:	f000 fc6b 	bl	80052b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049de:	f001 f825 	bl	8005a2c <xTaskResumeAll>
 80049e2:	e76c      	b.n	80048be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e6:	f000 fc65 	bl	80052b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ea:	f001 f81f 	bl	8005a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ee:	2300      	movs	r3, #0
		}
	}
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3738      	adds	r7, #56	; 0x38
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08e      	sub	sp, #56	; 0x38
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <xQueueGenericSendFromISR+0x3c>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <xQueueGenericSendFromISR+0x40>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <xQueueGenericSendFromISR+0x42>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	623b      	str	r3, [r7, #32]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <xQueueGenericSendFromISR+0x6a>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <xQueueGenericSendFromISR+0x6e>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueGenericSendFromISR+0x70>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61fb      	str	r3, [r7, #28]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a86:	f002 fb0b 	bl	80070a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a8a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	61ba      	str	r2, [r7, #24]
 8004aa0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <xQueueGenericSendFromISR+0xbc>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d12c      	bne.n	8004b12 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ac8:	f000 fb64 	bl	8005194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004acc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d112      	bne.n	8004afc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d016      	beq.n	8004b0c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	3324      	adds	r3, #36	; 0x24
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 f9f4 	bl	8005ed0 <xTaskRemoveFromEventList>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00e      	beq.n	8004b0c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e007      	b.n	8004b0c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004afc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b00:	3301      	adds	r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	b25a      	sxtb	r2, r3
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b10:	e001      	b.n	8004b16 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3738      	adds	r7, #56	; 0x38
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	623b      	str	r3, [r7, #32]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	61fb      	str	r3, [r7, #28]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <xQueueGiveFromISR+0x58>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <xQueueGiveFromISR+0x5c>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <xQueueGiveFromISR+0x5e>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	61bb      	str	r3, [r7, #24]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ba4:	f002 fa7c 	bl	80070a0 <vPortValidateInterruptPriority>
	__asm volatile
 8004ba8:	f3ef 8211 	mrs	r2, BASEPRI
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	617a      	str	r2, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004bc0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d22b      	bcs.n	8004c2c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d112      	bne.n	8004c16 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d016      	beq.n	8004c26 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	3324      	adds	r3, #36	; 0x24
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 f967 	bl	8005ed0 <xTaskRemoveFromEventList>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e007      	b.n	8004c26 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	b25a      	sxtb	r2, r3
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c26:	2301      	movs	r3, #1
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2a:	e001      	b.n	8004c30 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f383 8811 	msr	BASEPRI, r3
}
 8004c3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3738      	adds	r7, #56	; 0x38
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	; 0x30
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10a      	bne.n	8004c78 <xQueueReceive+0x30>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	623b      	str	r3, [r7, #32]
}
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <xQueueReceive+0x3e>
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <xQueueReceive+0x42>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <xQueueReceive+0x44>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xQueueReceive+0x5e>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	61fb      	str	r3, [r7, #28]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ca6:	f001 fb37 	bl	8006318 <xTaskGetSchedulerState>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <xQueueReceive+0x6e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <xQueueReceive+0x72>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <xQueueReceive+0x74>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xQueueReceive+0x8e>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	61bb      	str	r3, [r7, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cd6:	f002 f921 	bl	8006f1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01f      	beq.n	8004d26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cea:	f000 fabd 	bl	8005268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	1e5a      	subs	r2, r3, #1
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00f      	beq.n	8004d1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	3310      	adds	r3, #16
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 f8e4 	bl	8005ed0 <xTaskRemoveFromEventList>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d0e:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <xQueueReceive+0x1bc>)
 8004d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d1e:	f002 f92d 	bl	8006f7c <vPortExitCritical>
				return pdPASS;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e069      	b.n	8004dfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d2c:	f002 f926 	bl	8006f7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e062      	b.n	8004dfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d3a:	f107 0310 	add.w	r3, r7, #16
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 f98c 	bl	800605c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d44:	2301      	movs	r3, #1
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d48:	f002 f918 	bl	8006f7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d4c:	f000 fe60 	bl	8005a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d50:	f002 f8e4 	bl	8006f1c <vPortEnterCritical>
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d5a:	b25b      	sxtb	r3, r3
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d103      	bne.n	8004d6a <xQueueReceive+0x122>
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d70:	b25b      	sxtb	r3, r3
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d103      	bne.n	8004d80 <xQueueReceive+0x138>
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d80:	f002 f8fc 	bl	8006f7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d84:	1d3a      	adds	r2, r7, #4
 8004d86:	f107 0310 	add.w	r3, r7, #16
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 f97b 	bl	8006088 <xTaskCheckForTimeOut>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d123      	bne.n	8004de0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d9a:	f000 fadd 	bl	8005358 <prvIsQueueEmpty>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d017      	beq.n	8004dd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	3324      	adds	r3, #36	; 0x24
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 f803 	bl	8005db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db4:	f000 fa7e 	bl	80052b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004db8:	f000 fe38 	bl	8005a2c <xTaskResumeAll>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d189      	bne.n	8004cd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <xQueueReceive+0x1bc>)
 8004dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	e780      	b.n	8004cd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd6:	f000 fa6d 	bl	80052b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dda:	f000 fe27 	bl	8005a2c <xTaskResumeAll>
 8004dde:	e77a      	b.n	8004cd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de2:	f000 fa67 	bl	80052b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004de6:	f000 fe21 	bl	8005a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dec:	f000 fab4 	bl	8005358 <prvIsQueueEmpty>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f43f af6f 	beq.w	8004cd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004df8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3730      	adds	r7, #48	; 0x30
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08e      	sub	sp, #56	; 0x38
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	623b      	str	r3, [r7, #32]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	61fb      	str	r3, [r7, #28]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e58:	f001 fa5e 	bl	8006318 <xTaskGetSchedulerState>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <xQueueSemaphoreTake+0x60>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <xQueueSemaphoreTake+0x64>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <xQueueSemaphoreTake+0x66>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	61bb      	str	r3, [r7, #24]
}
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e88:	f002 f848 	bl	8006f1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d024      	beq.n	8004ee2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	1e5a      	subs	r2, r3, #1
 8004e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004ea8:	f001 fbce 	bl	8006648 <pvTaskIncrementMutexHeldCount>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00f      	beq.n	8004eda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	3310      	adds	r3, #16
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 f806 	bl	8005ed0 <xTaskRemoveFromEventList>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004eca:	4b54      	ldr	r3, [pc, #336]	; (800501c <xQueueSemaphoreTake+0x214>)
 8004ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004eda:	f002 f84f 	bl	8006f7c <vPortExitCritical>
				return pdPASS;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e097      	b.n	8005012 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d111      	bne.n	8004f0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	617b      	str	r3, [r7, #20]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f04:	f002 f83a 	bl	8006f7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e082      	b.n	8005012 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f12:	f107 030c 	add.w	r3, r7, #12
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 f8a0 	bl	800605c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f20:	f002 f82c 	bl	8006f7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f24:	f000 fd74 	bl	8005a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f28:	f001 fff8 	bl	8006f1c <vPortEnterCritical>
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f32:	b25b      	sxtb	r3, r3
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d103      	bne.n	8004f42 <xQueueSemaphoreTake+0x13a>
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f48:	b25b      	sxtb	r3, r3
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d103      	bne.n	8004f58 <xQueueSemaphoreTake+0x150>
 8004f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f58:	f002 f810 	bl	8006f7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f5c:	463a      	mov	r2, r7
 8004f5e:	f107 030c 	add.w	r3, r7, #12
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 f88f 	bl	8006088 <xTaskCheckForTimeOut>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d132      	bne.n	8004fd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f72:	f000 f9f1 	bl	8005358 <prvIsQueueEmpty>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d026      	beq.n	8004fca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004f84:	f001 ffca 	bl	8006f1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 f9e1 	bl	8006354 <xTaskPriorityInherit>
 8004f92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004f94:	f001 fff2 	bl	8006f7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	3324      	adds	r3, #36	; 0x24
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 ff09 	bl	8005db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fa8:	f000 f984 	bl	80052b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fac:	f000 fd3e 	bl	8005a2c <xTaskResumeAll>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f47f af68 	bne.w	8004e88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004fb8:	4b18      	ldr	r3, [pc, #96]	; (800501c <xQueueSemaphoreTake+0x214>)
 8004fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	e75e      	b.n	8004e88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fcc:	f000 f972 	bl	80052b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fd0:	f000 fd2c 	bl	8005a2c <xTaskResumeAll>
 8004fd4:	e758      	b.n	8004e88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004fd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fd8:	f000 f96c 	bl	80052b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fdc:	f000 fd26 	bl	8005a2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fe2:	f000 f9b9 	bl	8005358 <prvIsQueueEmpty>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f43f af4d 	beq.w	8004e88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00d      	beq.n	8005010 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004ff4:	f001 ff92 	bl	8006f1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ffa:	f000 f8b4 	bl	8005166 <prvGetDisinheritPriorityAfterTimeout>
 8004ffe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fa80 	bl	800650c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800500c:	f001 ffb6 	bl	8006f7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005012:	4618      	mov	r0, r3
 8005014:	3738      	adds	r7, #56	; 0x38
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	e000ed04 	.word	0xe000ed04

08005020 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08e      	sub	sp, #56	; 0x38
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	623b      	str	r3, [r7, #32]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <xQueueReceiveFromISR+0x3a>
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <xQueueReceiveFromISR+0x3e>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <xQueueReceiveFromISR+0x40>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61fb      	str	r3, [r7, #28]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800507a:	f002 f811 	bl	80070a0 <vPortValidateInterruptPriority>
	__asm volatile
 800507e:	f3ef 8211 	mrs	r2, BASEPRI
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	61ba      	str	r2, [r7, #24]
 8005094:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005096:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d02f      	beq.n	8005106 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050b4:	f000 f8d8 	bl	8005268 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	1e5a      	subs	r2, r3, #1
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d112      	bne.n	80050f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d016      	beq.n	8005100 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	3310      	adds	r3, #16
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fefa 	bl	8005ed0 <xTaskRemoveFromEventList>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00e      	beq.n	8005100 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e007      	b.n	8005100 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050f4:	3301      	adds	r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	b25a      	sxtb	r2, r3
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005100:	2301      	movs	r3, #1
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
 8005104:	e001      	b.n	800510a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005106:	2300      	movs	r3, #0
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f383 8811 	msr	BASEPRI, r3
}
 8005114:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005118:	4618      	mov	r0, r3
 800511a:	3738      	adds	r7, #56	; 0x38
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <vQueueDelete+0x28>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	60bb      	str	r3, [r7, #8]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f95b 	bl	8005404 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f002 f8a3 	bl	80072a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e001      	b.n	8005188 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005188:	68fb      	ldr	r3, [r7, #12]
	}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10d      	bne.n	80051ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d14d      	bne.n	8005256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 f936 	bl	8006430 <xTaskPriorityDisinherit>
 80051c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	605a      	str	r2, [r3, #4]
 80051cc:	e043      	b.n	8005256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d119      	bne.n	8005208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6898      	ldr	r0, [r3, #8]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	461a      	mov	r2, r3
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	f002 f9a0 	bl	8007524 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d32b      	bcc.n	8005256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	e026      	b.n	8005256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68d8      	ldr	r0, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	461a      	mov	r2, r3
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	f002 f986 	bl	8007524 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	425b      	negs	r3, r3
 8005222:	441a      	add	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d207      	bcs.n	8005244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	425b      	negs	r3, r3
 800523e:	441a      	add	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d105      	bne.n	8005256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	3b01      	subs	r3, #1
 8005254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800525e:	697b      	ldr	r3, [r7, #20]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d018      	beq.n	80052ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	441a      	add	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d303      	bcc.n	800529c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68d9      	ldr	r1, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	461a      	mov	r2, r3
 80052a6:	6838      	ldr	r0, [r7, #0]
 80052a8:	f002 f93c 	bl	8007524 <memcpy>
	}
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052bc:	f001 fe2e 	bl	8006f1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c8:	e011      	b.n	80052ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d012      	beq.n	80052f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3324      	adds	r3, #36	; 0x24
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fdfa 	bl	8005ed0 <xTaskRemoveFromEventList>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052e2:	f000 ff33 	bl	800614c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dce9      	bgt.n	80052ca <prvUnlockQueue+0x16>
 80052f6:	e000      	b.n	80052fa <prvUnlockQueue+0x46>
					break;
 80052f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	22ff      	movs	r2, #255	; 0xff
 80052fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005302:	f001 fe3b 	bl	8006f7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005306:	f001 fe09 	bl	8006f1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005312:	e011      	b.n	8005338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d012      	beq.n	8005342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3310      	adds	r3, #16
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fdd5 	bl	8005ed0 <xTaskRemoveFromEventList>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800532c:	f000 ff0e 	bl	800614c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	3b01      	subs	r3, #1
 8005334:	b2db      	uxtb	r3, r3
 8005336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800533c:	2b00      	cmp	r3, #0
 800533e:	dce9      	bgt.n	8005314 <prvUnlockQueue+0x60>
 8005340:	e000      	b.n	8005344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	22ff      	movs	r2, #255	; 0xff
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800534c:	f001 fe16 	bl	8006f7c <vPortExitCritical>
}
 8005350:	bf00      	nop
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005360:	f001 fddc 	bl	8006f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e001      	b.n	8005376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005376:	f001 fe01 	bl	8006f7c <vPortExitCritical>

	return xReturn;
 800537a:	68fb      	ldr	r3, [r7, #12]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800538c:	f001 fdc6 	bl	8006f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	429a      	cmp	r2, r3
 800539a:	d102      	bne.n	80053a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800539c:	2301      	movs	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e001      	b.n	80053a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053a6:	f001 fde9 	bl	8006f7c <vPortExitCritical>

	return xReturn;
 80053aa:	68fb      	ldr	r3, [r7, #12]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e014      	b.n	80053ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053c4:	4a0e      	ldr	r2, [pc, #56]	; (8005400 <vQueueAddToRegistry+0x4c>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053d0:	490b      	ldr	r1, [pc, #44]	; (8005400 <vQueueAddToRegistry+0x4c>)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <vQueueAddToRegistry+0x4c>)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053e6:	e006      	b.n	80053f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b07      	cmp	r3, #7
 80053f2:	d9e7      	bls.n	80053c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	20000494 	.word	0x20000494

08005404 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	e016      	b.n	8005440 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005412:	4a10      	ldr	r2, [pc, #64]	; (8005454 <vQueueUnregisterQueue+0x50>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d10b      	bne.n	800543a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005422:	4a0c      	ldr	r2, [pc, #48]	; (8005454 <vQueueUnregisterQueue+0x50>)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2100      	movs	r1, #0
 8005428:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <vQueueUnregisterQueue+0x50>)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4413      	add	r3, r2
 8005434:	2200      	movs	r2, #0
 8005436:	605a      	str	r2, [r3, #4]
				break;
 8005438:	e006      	b.n	8005448 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3301      	adds	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b07      	cmp	r3, #7
 8005444:	d9e5      	bls.n	8005412 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000494 	.word	0x20000494

08005458 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005468:	f001 fd58 	bl	8006f1c <vPortEnterCritical>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005472:	b25b      	sxtb	r3, r3
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d103      	bne.n	8005482 <vQueueWaitForMessageRestricted+0x2a>
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005488:	b25b      	sxtb	r3, r3
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d103      	bne.n	8005498 <vQueueWaitForMessageRestricted+0x40>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005498:	f001 fd70 	bl	8006f7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	3324      	adds	r3, #36	; 0x24
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fce3 	bl	8005e78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054b2:	6978      	ldr	r0, [r7, #20]
 80054b4:	f7ff fefe 	bl	80052b4 <prvUnlockQueue>
	}
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08e      	sub	sp, #56	; 0x38
 80054c4:	af04      	add	r7, sp, #16
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	623b      	str	r3, [r7, #32]
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xTaskCreateStatic+0x46>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	61fb      	str	r3, [r7, #28]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005506:	235c      	movs	r3, #92	; 0x5c
 8005508:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b5c      	cmp	r3, #92	; 0x5c
 800550e:	d00a      	beq.n	8005526 <xTaskCreateStatic+0x66>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	61bb      	str	r3, [r7, #24]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01e      	beq.n	800556a <xTaskCreateStatic+0xaa>
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01b      	beq.n	800556a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800553a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	2202      	movs	r2, #2
 8005540:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005544:	2300      	movs	r3, #0
 8005546:	9303      	str	r3, [sp, #12]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	f107 0314 	add.w	r3, r7, #20
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f850 	bl	8005602 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005564:	f000 f8d4 	bl	8005710 <prvAddNewTaskToReadyList>
 8005568:	e001      	b.n	800556e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800556e:	697b      	ldr	r3, [r7, #20]
	}
 8005570:	4618      	mov	r0, r3
 8005572:	3728      	adds	r7, #40	; 0x28
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	; 0x30
 800557c:	af04      	add	r7, sp, #16
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4618      	mov	r0, r3
 800558e:	f001 fdc5 	bl	800711c <pvPortMalloc>
 8005592:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00e      	beq.n	80055b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800559a:	205c      	movs	r0, #92	; 0x5c
 800559c:	f001 fdbe 	bl	800711c <pvPortMalloc>
 80055a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
 80055ae:	e005      	b.n	80055bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055b0:	6978      	ldr	r0, [r7, #20]
 80055b2:	f001 fe77 	bl	80072a4 <vPortFree>
 80055b6:	e001      	b.n	80055bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d017      	beq.n	80055f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055ca:	88fa      	ldrh	r2, [r7, #6]
 80055cc:	2300      	movs	r3, #0
 80055ce:	9303      	str	r3, [sp, #12]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	9302      	str	r3, [sp, #8]
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f80e 	bl	8005602 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055e6:	69f8      	ldr	r0, [r7, #28]
 80055e8:	f000 f892 	bl	8005710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055ec:	2301      	movs	r3, #1
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	e002      	b.n	80055f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
 80055f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055f8:	69bb      	ldr	r3, [r7, #24]
	}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b088      	sub	sp, #32
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
 800560e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	461a      	mov	r2, r3
 800561a:	21a5      	movs	r1, #165	; 0xa5
 800561c:	f001 ff56 	bl	80074cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800562a:	3b01      	subs	r3, #1
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f023 0307 	bic.w	r3, r3, #7
 8005638:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <prvInitialiseNewTask+0x58>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	617b      	str	r3, [r7, #20]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	e012      	b.n	8005686 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	7819      	ldrb	r1, [r3, #0]
 8005668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	3334      	adds	r3, #52	; 0x34
 8005670:	460a      	mov	r2, r1
 8005672:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d006      	beq.n	800568e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	3301      	adds	r3, #1
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b0f      	cmp	r3, #15
 800568a:	d9e9      	bls.n	8005660 <prvInitialiseNewTask+0x5e>
 800568c:	e000      	b.n	8005690 <prvInitialiseNewTask+0x8e>
		{
			break;
 800568e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	2b37      	cmp	r3, #55	; 0x37
 800569c:	d901      	bls.n	80056a2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800569e:	2337      	movs	r3, #55	; 0x37
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2200      	movs	r2, #0
 80056b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	3304      	adds	r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe fe66 	bl	800438a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	3318      	adds	r3, #24
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe fe61 	bl	800438a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2200      	movs	r2, #0
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	68f9      	ldr	r1, [r7, #12]
 80056f0:	69b8      	ldr	r0, [r7, #24]
 80056f2:	f001 fb23 	bl	8006d3c <pxPortInitialiseStack>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005706:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005708:	bf00      	nop
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005718:	f001 fc00 	bl	8006f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800571c:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <prvAddNewTaskToReadyList+0xc4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	4a2c      	ldr	r2, [pc, #176]	; (80057d4 <prvAddNewTaskToReadyList+0xc4>)
 8005724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005726:	4b2c      	ldr	r3, [pc, #176]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d109      	bne.n	8005742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800572e:	4a2a      	ldr	r2, [pc, #168]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <prvAddNewTaskToReadyList+0xc4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d110      	bne.n	800575e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800573c:	f000 fd2a 	bl	8006194 <prvInitialiseTaskLists>
 8005740:	e00d      	b.n	800575e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005742:	4b26      	ldr	r3, [pc, #152]	; (80057dc <prvAddNewTaskToReadyList+0xcc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800574a:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	429a      	cmp	r2, r3
 8005756:	d802      	bhi.n	800575e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005758:	4a1f      	ldr	r2, [pc, #124]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800575e:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <prvAddNewTaskToReadyList+0xd0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3301      	adds	r3, #1
 8005764:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <prvAddNewTaskToReadyList+0xd0>)
 8005766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005768:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <prvAddNewTaskToReadyList+0xd0>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <prvAddNewTaskToReadyList+0xd4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d903      	bls.n	8005784 <prvAddNewTaskToReadyList+0x74>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <prvAddNewTaskToReadyList+0xd4>)
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <prvAddNewTaskToReadyList+0xd8>)
 8005792:	441a      	add	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f7fe fe01 	bl	80043a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057a0:	f001 fbec 	bl	8006f7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057a4:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <prvAddNewTaskToReadyList+0xcc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00e      	beq.n	80057ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d207      	bcs.n	80057ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057ba:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <prvAddNewTaskToReadyList+0xdc>)
 80057bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	200009a8 	.word	0x200009a8
 80057d8:	200004d4 	.word	0x200004d4
 80057dc:	200009b4 	.word	0x200009b4
 80057e0:	200009c4 	.word	0x200009c4
 80057e4:	200009b0 	.word	0x200009b0
 80057e8:	200004d8 	.word	0x200004d8
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d017      	beq.n	8005832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <vTaskDelay+0x60>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <vTaskDelay+0x30>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60bb      	str	r3, [r7, #8]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005820:	f000 f8f6 	bl	8005a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005824:	2100      	movs	r1, #0
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 ff22 	bl	8006670 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800582c:	f000 f8fe 	bl	8005a2c <xTaskResumeAll>
 8005830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d107      	bne.n	8005848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <vTaskDelay+0x64>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	200009d0 	.word	0x200009d0
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005860:	f001 fb5c 	bl	8006f1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d102      	bne.n	8005870 <vTaskSuspend+0x18>
 800586a:	4b30      	ldr	r3, [pc, #192]	; (800592c <vTaskSuspend+0xd4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	e000      	b.n	8005872 <vTaskSuspend+0x1a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3304      	adds	r3, #4
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fded 	bl	8004458 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3318      	adds	r3, #24
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fde4 	bl	8004458 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3304      	adds	r3, #4
 8005894:	4619      	mov	r1, r3
 8005896:	4826      	ldr	r0, [pc, #152]	; (8005930 <vTaskSuspend+0xd8>)
 8005898:	f7fe fd83 	bl	80043a2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d103      	bne.n	80058b0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80058b0:	f001 fb64 	bl	8006f7c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80058b4:	4b1f      	ldr	r3, [pc, #124]	; (8005934 <vTaskSuspend+0xdc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80058bc:	f001 fb2e 	bl	8006f1c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80058c0:	f000 fd06 	bl	80062d0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80058c4:	f001 fb5a 	bl	8006f7c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80058c8:	4b18      	ldr	r3, [pc, #96]	; (800592c <vTaskSuspend+0xd4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d127      	bne.n	8005922 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80058d2:	4b18      	ldr	r3, [pc, #96]	; (8005934 <vTaskSuspend+0xdc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d017      	beq.n	800590a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80058da:	4b17      	ldr	r3, [pc, #92]	; (8005938 <vTaskSuspend+0xe0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <vTaskSuspend+0xa0>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60bb      	str	r3, [r7, #8]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <vTaskSuspend+0xe4>)
 80058fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005908:	e00b      	b.n	8005922 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <vTaskSuspend+0xd8>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <vTaskSuspend+0xe8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d103      	bne.n	800591e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <vTaskSuspend+0xd4>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
	}
 800591c:	e001      	b.n	8005922 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800591e:	f000 f9ef 	bl	8005d00 <vTaskSwitchContext>
	}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	200004d4 	.word	0x200004d4
 8005930:	20000994 	.word	0x20000994
 8005934:	200009b4 	.word	0x200009b4
 8005938:	200009d0 	.word	0x200009d0
 800593c:	e000ed04 	.word	0xe000ed04
 8005940:	200009a8 	.word	0x200009a8

08005944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800594a:	2300      	movs	r3, #0
 800594c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005952:	463a      	mov	r2, r7
 8005954:	1d39      	adds	r1, r7, #4
 8005956:	f107 0308 	add.w	r3, r7, #8
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fafa 	bl	8003f54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	9202      	str	r2, [sp, #8]
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	2300      	movs	r3, #0
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	2300      	movs	r3, #0
 8005970:	460a      	mov	r2, r1
 8005972:	4921      	ldr	r1, [pc, #132]	; (80059f8 <vTaskStartScheduler+0xb4>)
 8005974:	4821      	ldr	r0, [pc, #132]	; (80059fc <vTaskStartScheduler+0xb8>)
 8005976:	f7ff fda3 	bl	80054c0 <xTaskCreateStatic>
 800597a:	4603      	mov	r3, r0
 800597c:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <vTaskStartScheduler+0xbc>)
 800597e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005980:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <vTaskStartScheduler+0xbc>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e001      	b.n	8005992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d102      	bne.n	800599e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005998:	f000 febe 	bl	8006718 <xTimerCreateTimerTask>
 800599c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d116      	bne.n	80059d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	613b      	str	r3, [r7, #16]
}
 80059b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059b8:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <vTaskStartScheduler+0xc0>)
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295
 80059be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <vTaskStartScheduler+0xc4>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80059c6:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <vTaskStartScheduler+0xc8>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059cc:	f001 fa34 	bl	8006e38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059d0:	e00e      	b.n	80059f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d10a      	bne.n	80059f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60fb      	str	r3, [r7, #12]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <vTaskStartScheduler+0xaa>
}
 80059f0:	bf00      	nop
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	0800764c 	.word	0x0800764c
 80059fc:	08006165 	.word	0x08006165
 8005a00:	200009cc 	.word	0x200009cc
 8005a04:	200009c8 	.word	0x200009c8
 8005a08:	200009b4 	.word	0x200009b4
 8005a0c:	200009ac 	.word	0x200009ac

08005a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a14:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <vTaskSuspendAll+0x18>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	4a03      	ldr	r2, [pc, #12]	; (8005a28 <vTaskSuspendAll+0x18>)
 8005a1c:	6013      	str	r3, [r2, #0]
}
 8005a1e:	bf00      	nop
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	200009d0 	.word	0x200009d0

08005a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a3a:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <xTaskResumeAll+0x118>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <xTaskResumeAll+0x2c>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	603b      	str	r3, [r7, #0]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a58:	f001 fa60 	bl	8006f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a5c:	4b39      	ldr	r3, [pc, #228]	; (8005b44 <xTaskResumeAll+0x118>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	4a38      	ldr	r2, [pc, #224]	; (8005b44 <xTaskResumeAll+0x118>)
 8005a64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a66:	4b37      	ldr	r3, [pc, #220]	; (8005b44 <xTaskResumeAll+0x118>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d162      	bne.n	8005b34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a6e:	4b36      	ldr	r3, [pc, #216]	; (8005b48 <xTaskResumeAll+0x11c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d05e      	beq.n	8005b34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a76:	e02f      	b.n	8005ad8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a78:	4b34      	ldr	r3, [pc, #208]	; (8005b4c <xTaskResumeAll+0x120>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3318      	adds	r3, #24
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe fce7 	bl	8004458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fce2 	bl	8004458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a98:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <xTaskResumeAll+0x124>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d903      	bls.n	8005aa8 <xTaskResumeAll+0x7c>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <xTaskResumeAll+0x124>)
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4a27      	ldr	r2, [pc, #156]	; (8005b54 <xTaskResumeAll+0x128>)
 8005ab6:	441a      	add	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f7fe fc6f 	bl	80043a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <xTaskResumeAll+0x12c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ad2:	4b22      	ldr	r3, [pc, #136]	; (8005b5c <xTaskResumeAll+0x130>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ad8:	4b1c      	ldr	r3, [pc, #112]	; (8005b4c <xTaskResumeAll+0x120>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1cb      	bne.n	8005a78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ae6:	f000 fbf3 	bl	80062d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005aea:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <xTaskResumeAll+0x134>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d010      	beq.n	8005b18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005af6:	f000 f845 	bl	8005b84 <xTaskIncrementTick>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b00:	4b16      	ldr	r3, [pc, #88]	; (8005b5c <xTaskResumeAll+0x130>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f1      	bne.n	8005af6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005b12:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <xTaskResumeAll+0x134>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <xTaskResumeAll+0x130>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b20:	2301      	movs	r3, #1
 8005b22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b24:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <xTaskResumeAll+0x138>)
 8005b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b34:	f001 fa22 	bl	8006f7c <vPortExitCritical>

	return xAlreadyYielded;
 8005b38:	68bb      	ldr	r3, [r7, #8]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	200009d0 	.word	0x200009d0
 8005b48:	200009a8 	.word	0x200009a8
 8005b4c:	20000968 	.word	0x20000968
 8005b50:	200009b0 	.word	0x200009b0
 8005b54:	200004d8 	.word	0x200004d8
 8005b58:	200004d4 	.word	0x200004d4
 8005b5c:	200009bc 	.word	0x200009bc
 8005b60:	200009b8 	.word	0x200009b8
 8005b64:	e000ed04 	.word	0xe000ed04

08005b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <xTaskGetTickCount+0x18>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b74:	687b      	ldr	r3, [r7, #4]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	200009ac 	.word	0x200009ac

08005b84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b8e:	4b51      	ldr	r3, [pc, #324]	; (8005cd4 <xTaskIncrementTick+0x150>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f040 808e 	bne.w	8005cb4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b98:	4b4f      	ldr	r3, [pc, #316]	; (8005cd8 <xTaskIncrementTick+0x154>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ba0:	4a4d      	ldr	r2, [pc, #308]	; (8005cd8 <xTaskIncrementTick+0x154>)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d120      	bne.n	8005bee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bac:	4b4b      	ldr	r3, [pc, #300]	; (8005cdc <xTaskIncrementTick+0x158>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <xTaskIncrementTick+0x48>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	603b      	str	r3, [r7, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <xTaskIncrementTick+0x46>
 8005bcc:	4b43      	ldr	r3, [pc, #268]	; (8005cdc <xTaskIncrementTick+0x158>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	4b43      	ldr	r3, [pc, #268]	; (8005ce0 <xTaskIncrementTick+0x15c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a41      	ldr	r2, [pc, #260]	; (8005cdc <xTaskIncrementTick+0x158>)
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	4a41      	ldr	r2, [pc, #260]	; (8005ce0 <xTaskIncrementTick+0x15c>)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	4b40      	ldr	r3, [pc, #256]	; (8005ce4 <xTaskIncrementTick+0x160>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	4a3f      	ldr	r2, [pc, #252]	; (8005ce4 <xTaskIncrementTick+0x160>)
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	f000 fb71 	bl	80062d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bee:	4b3e      	ldr	r3, [pc, #248]	; (8005ce8 <xTaskIncrementTick+0x164>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d34e      	bcc.n	8005c96 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf8:	4b38      	ldr	r3, [pc, #224]	; (8005cdc <xTaskIncrementTick+0x158>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <xTaskIncrementTick+0x82>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <xTaskIncrementTick+0x84>
 8005c06:	2300      	movs	r3, #0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c0c:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <xTaskIncrementTick+0x164>)
 8005c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c12:	601a      	str	r2, [r3, #0]
					break;
 8005c14:	e03f      	b.n	8005c96 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c16:	4b31      	ldr	r3, [pc, #196]	; (8005cdc <xTaskIncrementTick+0x158>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d203      	bcs.n	8005c36 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c2e:	4a2e      	ldr	r2, [pc, #184]	; (8005ce8 <xTaskIncrementTick+0x164>)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6013      	str	r3, [r2, #0]
						break;
 8005c34:	e02f      	b.n	8005c96 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe fc0c 	bl	8004458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe fc03 	bl	8004458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	4b25      	ldr	r3, [pc, #148]	; (8005cec <xTaskIncrementTick+0x168>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d903      	bls.n	8005c66 <xTaskIncrementTick+0xe2>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c62:	4a22      	ldr	r2, [pc, #136]	; (8005cec <xTaskIncrementTick+0x168>)
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <xTaskIncrementTick+0x16c>)
 8005c74:	441a      	add	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	f7fe fb90 	bl	80043a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	4b1b      	ldr	r3, [pc, #108]	; (8005cf4 <xTaskIncrementTick+0x170>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d3b3      	bcc.n	8005bf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c94:	e7b0      	b.n	8005bf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c96:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <xTaskIncrementTick+0x170>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9c:	4914      	ldr	r1, [pc, #80]	; (8005cf0 <xTaskIncrementTick+0x16c>)
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d907      	bls.n	8005cbe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	e004      	b.n	8005cbe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005cb4:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <xTaskIncrementTick+0x174>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	4a0f      	ldr	r2, [pc, #60]	; (8005cf8 <xTaskIncrementTick+0x174>)
 8005cbc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005cbe:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <xTaskIncrementTick+0x178>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005cca:	697b      	ldr	r3, [r7, #20]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	200009d0 	.word	0x200009d0
 8005cd8:	200009ac 	.word	0x200009ac
 8005cdc:	20000960 	.word	0x20000960
 8005ce0:	20000964 	.word	0x20000964
 8005ce4:	200009c0 	.word	0x200009c0
 8005ce8:	200009c8 	.word	0x200009c8
 8005cec:	200009b0 	.word	0x200009b0
 8005cf0:	200004d8 	.word	0x200004d8
 8005cf4:	200004d4 	.word	0x200004d4
 8005cf8:	200009b8 	.word	0x200009b8
 8005cfc:	200009bc 	.word	0x200009bc

08005d00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d06:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <vTaskSwitchContext+0xa4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d0e:	4b26      	ldr	r3, [pc, #152]	; (8005da8 <vTaskSwitchContext+0xa8>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d14:	e041      	b.n	8005d9a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005d16:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <vTaskSwitchContext+0xa8>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005d1c:	4b23      	ldr	r3, [pc, #140]	; (8005dac <vTaskSwitchContext+0xac>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	e010      	b.n	8005d46 <vTaskSwitchContext+0x46>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <vTaskSwitchContext+0x40>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	607b      	str	r3, [r7, #4]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <vTaskSwitchContext+0x3e>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	491a      	ldr	r1, [pc, #104]	; (8005db0 <vTaskSwitchContext+0xb0>)
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0e4      	beq.n	8005d24 <vTaskSwitchContext+0x24>
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4a12      	ldr	r2, [pc, #72]	; (8005db0 <vTaskSwitchContext+0xb0>)
 8005d66:	4413      	add	r3, r2
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	605a      	str	r2, [r3, #4]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d104      	bne.n	8005d8a <vTaskSwitchContext+0x8a>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <vTaskSwitchContext+0xb4>)
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	4a05      	ldr	r2, [pc, #20]	; (8005dac <vTaskSwitchContext+0xac>)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6013      	str	r3, [r2, #0]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr
 8005da4:	200009d0 	.word	0x200009d0
 8005da8:	200009bc 	.word	0x200009bc
 8005dac:	200009b0 	.word	0x200009b0
 8005db0:	200004d8 	.word	0x200004d8
 8005db4:	200004d4 	.word	0x200004d4

08005db8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	60fb      	str	r3, [r7, #12]
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <vTaskPlaceOnEventList+0x44>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3318      	adds	r3, #24
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fe fafe 	bl	80043e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005dec:	2101      	movs	r1, #1
 8005dee:	6838      	ldr	r0, [r7, #0]
 8005df0:	f000 fc3e 	bl	8006670 <prvAddCurrentTaskToDelayedList>
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	200004d4 	.word	0x200004d4

08005e00 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	617b      	str	r3, [r7, #20]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005e28:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	613b      	str	r3, [r7, #16]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005e46:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e50:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e52:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3318      	adds	r3, #24
 8005e58:	4619      	mov	r1, r3
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7fe faa1 	bl	80043a2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e60:	2101      	movs	r1, #1
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fc04 	bl	8006670 <prvAddCurrentTaskToDelayedList>
}
 8005e68:	bf00      	nop
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	200009d0 	.word	0x200009d0
 8005e74:	200004d4 	.word	0x200004d4

08005e78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	617b      	str	r3, [r7, #20]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <vTaskPlaceOnEventListRestricted+0x54>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3318      	adds	r3, #24
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7fe fa7a 	bl	80043a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	68b8      	ldr	r0, [r7, #8]
 8005ebe:	f000 fbd7 	bl	8006670 <prvAddCurrentTaskToDelayedList>
	}
 8005ec2:	bf00      	nop
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	200004d4 	.word	0x200004d4

08005ed0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	60fb      	str	r3, [r7, #12]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	3318      	adds	r3, #24
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe faa9 	bl	8004458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f06:	4b1e      	ldr	r3, [pc, #120]	; (8005f80 <xTaskRemoveFromEventList+0xb0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d11d      	bne.n	8005f4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe faa0 	bl	8004458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <xTaskRemoveFromEventList+0xb4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d903      	bls.n	8005f2c <xTaskRemoveFromEventList+0x5c>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <xTaskRemoveFromEventList+0xb4>)
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <xTaskRemoveFromEventList+0xb8>)
 8005f3a:	441a      	add	r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4619      	mov	r1, r3
 8005f42:	4610      	mov	r0, r2
 8005f44:	f7fe fa2d 	bl	80043a2 <vListInsertEnd>
 8005f48:	e005      	b.n	8005f56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3318      	adds	r3, #24
 8005f4e:	4619      	mov	r1, r3
 8005f50:	480e      	ldr	r0, [pc, #56]	; (8005f8c <xTaskRemoveFromEventList+0xbc>)
 8005f52:	f7fe fa26 	bl	80043a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <xTaskRemoveFromEventList+0xc0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d905      	bls.n	8005f70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <xTaskRemoveFromEventList+0xc4>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e001      	b.n	8005f74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005f74:	697b      	ldr	r3, [r7, #20]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200009d0 	.word	0x200009d0
 8005f84:	200009b0 	.word	0x200009b0
 8005f88:	200004d8 	.word	0x200004d8
 8005f8c:	20000968 	.word	0x20000968
 8005f90:	200004d4 	.word	0x200004d4
 8005f94:	200009bc 	.word	0x200009bc

08005f98 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005fa2:	4b29      	ldr	r3, [pc, #164]	; (8006048 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	613b      	str	r3, [r7, #16]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	60fb      	str	r3, [r7, #12]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7fe fa33 	bl	8004458 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe fa2e 	bl	8004458 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d903      	bls.n	8006010 <vTaskRemoveFromUnorderedEventList+0x78>
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	4a0f      	ldr	r2, [pc, #60]	; (800604c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4a0c      	ldr	r2, [pc, #48]	; (8006050 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800601e:	441a      	add	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fe f9bb 	bl	80043a2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	4b08      	ldr	r3, [pc, #32]	; (8006054 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	429a      	cmp	r2, r3
 8006038:	d902      	bls.n	8006040 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800603a:	4b07      	ldr	r3, [pc, #28]	; (8006058 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
	}
}
 8006040:	bf00      	nop
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	200009d0 	.word	0x200009d0
 800604c:	200009b0 	.word	0x200009b0
 8006050:	200004d8 	.word	0x200004d8
 8006054:	200004d4 	.word	0x200004d4
 8006058:	200009bc 	.word	0x200009bc

0800605c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <vTaskInternalSetTimeOutState+0x24>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <vTaskInternalSetTimeOutState+0x28>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	605a      	str	r2, [r3, #4]
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	200009c0 	.word	0x200009c0
 8006084:	200009ac 	.word	0x200009ac

08006088 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	613b      	str	r3, [r7, #16]
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	60fb      	str	r3, [r7, #12]
}
 80060c6:	bf00      	nop
 80060c8:	e7fe      	b.n	80060c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060ca:	f000 ff27 	bl	8006f1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <xTaskCheckForTimeOut+0xbc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	d102      	bne.n	80060ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	e023      	b.n	8006136 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <xTaskCheckForTimeOut+0xc0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d007      	beq.n	800610a <xTaskCheckForTimeOut+0x82>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	429a      	cmp	r2, r3
 8006102:	d302      	bcc.n	800610a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006104:	2301      	movs	r3, #1
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e015      	b.n	8006136 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	429a      	cmp	r2, r3
 8006112:	d20b      	bcs.n	800612c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1ad2      	subs	r2, r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff ff9b 	bl	800605c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
 800612a:	e004      	b.n	8006136 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006132:	2301      	movs	r3, #1
 8006134:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006136:	f000 ff21 	bl	8006f7c <vPortExitCritical>

	return xReturn;
 800613a:	69fb      	ldr	r3, [r7, #28]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	200009ac 	.word	0x200009ac
 8006148:	200009c0 	.word	0x200009c0

0800614c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006150:	4b03      	ldr	r3, [pc, #12]	; (8006160 <vTaskMissedYield+0x14>)
 8006152:	2201      	movs	r2, #1
 8006154:	601a      	str	r2, [r3, #0]
}
 8006156:	bf00      	nop
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	200009bc 	.word	0x200009bc

08006164 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800616c:	f000 f852 	bl	8006214 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <prvIdleTask+0x28>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d9f9      	bls.n	800616c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <prvIdleTask+0x2c>)
 800617a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006188:	e7f0      	b.n	800616c <prvIdleTask+0x8>
 800618a:	bf00      	nop
 800618c:	200004d8 	.word	0x200004d8
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800619a:	2300      	movs	r3, #0
 800619c:	607b      	str	r3, [r7, #4]
 800619e:	e00c      	b.n	80061ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4a12      	ldr	r2, [pc, #72]	; (80061f4 <prvInitialiseTaskLists+0x60>)
 80061ac:	4413      	add	r3, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe f8cc 	bl	800434c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3301      	adds	r3, #1
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b37      	cmp	r3, #55	; 0x37
 80061be:	d9ef      	bls.n	80061a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061c0:	480d      	ldr	r0, [pc, #52]	; (80061f8 <prvInitialiseTaskLists+0x64>)
 80061c2:	f7fe f8c3 	bl	800434c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061c6:	480d      	ldr	r0, [pc, #52]	; (80061fc <prvInitialiseTaskLists+0x68>)
 80061c8:	f7fe f8c0 	bl	800434c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061cc:	480c      	ldr	r0, [pc, #48]	; (8006200 <prvInitialiseTaskLists+0x6c>)
 80061ce:	f7fe f8bd 	bl	800434c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061d2:	480c      	ldr	r0, [pc, #48]	; (8006204 <prvInitialiseTaskLists+0x70>)
 80061d4:	f7fe f8ba 	bl	800434c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061d8:	480b      	ldr	r0, [pc, #44]	; (8006208 <prvInitialiseTaskLists+0x74>)
 80061da:	f7fe f8b7 	bl	800434c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061de:	4b0b      	ldr	r3, [pc, #44]	; (800620c <prvInitialiseTaskLists+0x78>)
 80061e0:	4a05      	ldr	r2, [pc, #20]	; (80061f8 <prvInitialiseTaskLists+0x64>)
 80061e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061e4:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <prvInitialiseTaskLists+0x7c>)
 80061e6:	4a05      	ldr	r2, [pc, #20]	; (80061fc <prvInitialiseTaskLists+0x68>)
 80061e8:	601a      	str	r2, [r3, #0]
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200004d8 	.word	0x200004d8
 80061f8:	20000938 	.word	0x20000938
 80061fc:	2000094c 	.word	0x2000094c
 8006200:	20000968 	.word	0x20000968
 8006204:	2000097c 	.word	0x2000097c
 8006208:	20000994 	.word	0x20000994
 800620c:	20000960 	.word	0x20000960
 8006210:	20000964 	.word	0x20000964

08006214 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800621a:	e019      	b.n	8006250 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800621c:	f000 fe7e 	bl	8006f1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006220:	4b10      	ldr	r3, [pc, #64]	; (8006264 <prvCheckTasksWaitingTermination+0x50>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe f913 	bl	8004458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006232:	4b0d      	ldr	r3, [pc, #52]	; (8006268 <prvCheckTasksWaitingTermination+0x54>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3b01      	subs	r3, #1
 8006238:	4a0b      	ldr	r2, [pc, #44]	; (8006268 <prvCheckTasksWaitingTermination+0x54>)
 800623a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <prvCheckTasksWaitingTermination+0x58>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	4a0a      	ldr	r2, [pc, #40]	; (800626c <prvCheckTasksWaitingTermination+0x58>)
 8006244:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006246:	f000 fe99 	bl	8006f7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f810 	bl	8006270 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <prvCheckTasksWaitingTermination+0x58>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e1      	bne.n	800621c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	2000097c 	.word	0x2000097c
 8006268:	200009a8 	.word	0x200009a8
 800626c:	20000990 	.word	0x20000990

08006270 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800627e:	2b00      	cmp	r3, #0
 8006280:	d108      	bne.n	8006294 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	4618      	mov	r0, r3
 8006288:	f001 f80c 	bl	80072a4 <vPortFree>
				vPortFree( pxTCB );
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f809 	bl	80072a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006292:	e018      	b.n	80062c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800629a:	2b01      	cmp	r3, #1
 800629c:	d103      	bne.n	80062a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 f800 	bl	80072a4 <vPortFree>
	}
 80062a4:	e00f      	b.n	80062c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d00a      	beq.n	80062c6 <prvDeleteTCB+0x56>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	60fb      	str	r3, [r7, #12]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <prvDeleteTCB+0x54>
	}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062d6:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <prvResetNextTaskUnblockTime+0x40>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <prvResetNextTaskUnblockTime+0x14>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <prvResetNextTaskUnblockTime+0x16>
 80062e4:	2300      	movs	r3, #0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <prvResetNextTaskUnblockTime+0x44>)
 80062ec:	f04f 32ff 	mov.w	r2, #4294967295
 80062f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062f2:	e008      	b.n	8006306 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <prvResetNextTaskUnblockTime+0x40>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	4a04      	ldr	r2, [pc, #16]	; (8006314 <prvResetNextTaskUnblockTime+0x44>)
 8006304:	6013      	str	r3, [r2, #0]
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	20000960 	.word	0x20000960
 8006314:	200009c8 	.word	0x200009c8

08006318 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800631e:	4b0b      	ldr	r3, [pc, #44]	; (800634c <xTaskGetSchedulerState+0x34>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006326:	2301      	movs	r3, #1
 8006328:	607b      	str	r3, [r7, #4]
 800632a:	e008      	b.n	800633e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800632c:	4b08      	ldr	r3, [pc, #32]	; (8006350 <xTaskGetSchedulerState+0x38>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006334:	2302      	movs	r3, #2
 8006336:	607b      	str	r3, [r7, #4]
 8006338:	e001      	b.n	800633e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800633e:	687b      	ldr	r3, [r7, #4]
	}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	200009b4 	.word	0x200009b4
 8006350:	200009d0 	.word	0x200009d0

08006354 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d056      	beq.n	8006418 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636e:	4b2d      	ldr	r3, [pc, #180]	; (8006424 <xTaskPriorityInherit+0xd0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	429a      	cmp	r2, r3
 8006376:	d246      	bcs.n	8006406 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	db06      	blt.n	800638e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <xTaskPriorityInherit+0xd0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6959      	ldr	r1, [r3, #20]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4a22      	ldr	r2, [pc, #136]	; (8006428 <xTaskPriorityInherit+0xd4>)
 80063a0:	4413      	add	r3, r2
 80063a2:	4299      	cmp	r1, r3
 80063a4:	d101      	bne.n	80063aa <xTaskPriorityInherit+0x56>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <xTaskPriorityInherit+0x58>
 80063aa:	2300      	movs	r3, #0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d022      	beq.n	80063f6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe f84f 	bl	8004458 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063ba:	4b1a      	ldr	r3, [pc, #104]	; (8006424 <xTaskPriorityInherit+0xd0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	4b18      	ldr	r3, [pc, #96]	; (800642c <xTaskPriorityInherit+0xd8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d903      	bls.n	80063d8 <xTaskPriorityInherit+0x84>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4a15      	ldr	r2, [pc, #84]	; (800642c <xTaskPriorityInherit+0xd8>)
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4a10      	ldr	r2, [pc, #64]	; (8006428 <xTaskPriorityInherit+0xd4>)
 80063e6:	441a      	add	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f7fd ffd7 	bl	80043a2 <vListInsertEnd>
 80063f4:	e004      	b.n	8006400 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <xTaskPriorityInherit+0xd0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e008      	b.n	8006418 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <xTaskPriorityInherit+0xd0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	429a      	cmp	r2, r3
 8006412:	d201      	bcs.n	8006418 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006414:	2301      	movs	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006418:	68fb      	ldr	r3, [r7, #12]
	}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	200004d4 	.word	0x200004d4
 8006428:	200004d8 	.word	0x200004d8
 800642c:	200009b0 	.word	0x200009b0

08006430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d056      	beq.n	80064f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006446:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <xTaskPriorityDisinherit+0xd0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	429a      	cmp	r2, r3
 800644e:	d00a      	beq.n	8006466 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60fb      	str	r3, [r7, #12]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	60bb      	str	r3, [r7, #8]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006488:	1e5a      	subs	r2, r3, #1
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006496:	429a      	cmp	r2, r3
 8006498:	d02c      	beq.n	80064f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d128      	bne.n	80064f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fd ffd6 	bl	8004458 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <xTaskPriorityDisinherit+0xd4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d903      	bls.n	80064d4 <xTaskPriorityDisinherit+0xa4>
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	4a0c      	ldr	r2, [pc, #48]	; (8006504 <xTaskPriorityDisinherit+0xd4>)
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4a09      	ldr	r2, [pc, #36]	; (8006508 <xTaskPriorityDisinherit+0xd8>)
 80064e2:	441a      	add	r2, r3
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f7fd ff59 	bl	80043a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064f4:	697b      	ldr	r3, [r7, #20]
	}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	200004d4 	.word	0x200004d4
 8006504:	200009b0 	.word	0x200009b0
 8006508:	200004d8 	.word	0x200004d8

0800650c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800651a:	2301      	movs	r3, #1
 800651c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d06f      	beq.n	8006604 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d902      	bls.n	8006552 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	61fb      	str	r3, [r7, #28]
 8006550:	e002      	b.n	8006558 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006556:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	429a      	cmp	r2, r3
 8006560:	d050      	beq.n	8006604 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	429a      	cmp	r2, r3
 800656a:	d14b      	bne.n	8006604 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800656c:	4b27      	ldr	r3, [pc, #156]	; (800660c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	429a      	cmp	r2, r3
 8006574:	d10a      	bne.n	800658c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	60bb      	str	r3, [r7, #8]
}
 8006588:	bf00      	nop
 800658a:	e7fe      	b.n	800658a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	db04      	blt.n	80065aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	6959      	ldr	r1, [r3, #20]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4a15      	ldr	r2, [pc, #84]	; (8006610 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80065ba:	4413      	add	r3, r2
 80065bc:	4299      	cmp	r1, r3
 80065be:	d101      	bne.n	80065c4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80065c4:	2300      	movs	r3, #0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01c      	beq.n	8006604 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	3304      	adds	r3, #4
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fd ff42 	bl	8004458 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d8:	4b0e      	ldr	r3, [pc, #56]	; (8006614 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d903      	bls.n	80065e8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	4a0b      	ldr	r2, [pc, #44]	; (8006614 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4a06      	ldr	r2, [pc, #24]	; (8006610 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80065f6:	441a      	add	r2, r3
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f7fd fecf 	bl	80043a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006604:	bf00      	nop
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	200004d4 	.word	0x200004d4
 8006610:	200004d8 	.word	0x200004d8
 8006614:	200009b0 	.word	0x200009b0

08006618 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <uxTaskResetEventItemValue+0x2c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006626:	4b07      	ldr	r3, [pc, #28]	; (8006644 <uxTaskResetEventItemValue+0x2c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <uxTaskResetEventItemValue+0x2c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006634:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006636:	687b      	ldr	r3, [r7, #4]
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	200004d4 	.word	0x200004d4

08006648 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <pvTaskIncrementMutexHeldCount+0x24>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <pvTaskIncrementMutexHeldCount+0x24>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800665a:	3201      	adds	r2, #1
 800665c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800665e:	4b03      	ldr	r3, [pc, #12]	; (800666c <pvTaskIncrementMutexHeldCount+0x24>)
 8006660:	681b      	ldr	r3, [r3, #0]
	}
 8006662:	4618      	mov	r0, r3
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	200004d4 	.word	0x200004d4

08006670 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800667a:	4b21      	ldr	r3, [pc, #132]	; (8006700 <prvAddCurrentTaskToDelayedList+0x90>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006680:	4b20      	ldr	r3, [pc, #128]	; (8006704 <prvAddCurrentTaskToDelayedList+0x94>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3304      	adds	r3, #4
 8006686:	4618      	mov	r0, r3
 8006688:	f7fd fee6 	bl	8004458 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006692:	d10a      	bne.n	80066aa <prvAddCurrentTaskToDelayedList+0x3a>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d007      	beq.n	80066aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800669a:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <prvAddCurrentTaskToDelayedList+0x94>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3304      	adds	r3, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4819      	ldr	r0, [pc, #100]	; (8006708 <prvAddCurrentTaskToDelayedList+0x98>)
 80066a4:	f7fd fe7d 	bl	80043a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066a8:	e026      	b.n	80066f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4413      	add	r3, r2
 80066b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066b2:	4b14      	ldr	r3, [pc, #80]	; (8006704 <prvAddCurrentTaskToDelayedList+0x94>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d209      	bcs.n	80066d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <prvAddCurrentTaskToDelayedList+0x9c>)
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <prvAddCurrentTaskToDelayedList+0x94>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f7fd fe8a 	bl	80043e8 <vListInsert>
}
 80066d4:	e010      	b.n	80066f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d6:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <prvAddCurrentTaskToDelayedList+0x94>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3304      	adds	r3, #4
 80066e0:	4619      	mov	r1, r3
 80066e2:	4610      	mov	r0, r2
 80066e4:	f7fd fe80 	bl	80043e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d202      	bcs.n	80066f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066f2:	4a08      	ldr	r2, [pc, #32]	; (8006714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6013      	str	r3, [r2, #0]
}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	200009ac 	.word	0x200009ac
 8006704:	200004d4 	.word	0x200004d4
 8006708:	20000994 	.word	0x20000994
 800670c:	20000964 	.word	0x20000964
 8006710:	20000960 	.word	0x20000960
 8006714:	200009c8 	.word	0x200009c8

08006718 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006722:	f000 facb 	bl	8006cbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006726:	4b1c      	ldr	r3, [pc, #112]	; (8006798 <xTimerCreateTimerTask+0x80>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d021      	beq.n	8006772 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006736:	1d3a      	adds	r2, r7, #4
 8006738:	f107 0108 	add.w	r1, r7, #8
 800673c:	f107 030c 	add.w	r3, r7, #12
 8006740:	4618      	mov	r0, r3
 8006742:	f7fd fc1f 	bl	8003f84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	9202      	str	r2, [sp, #8]
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	2302      	movs	r3, #2
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	460a      	mov	r2, r1
 8006758:	4910      	ldr	r1, [pc, #64]	; (800679c <xTimerCreateTimerTask+0x84>)
 800675a:	4811      	ldr	r0, [pc, #68]	; (80067a0 <xTimerCreateTimerTask+0x88>)
 800675c:	f7fe feb0 	bl	80054c0 <xTaskCreateStatic>
 8006760:	4603      	mov	r3, r0
 8006762:	4a10      	ldr	r2, [pc, #64]	; (80067a4 <xTimerCreateTimerTask+0x8c>)
 8006764:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006766:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <xTimerCreateTimerTask+0x8c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800676e:	2301      	movs	r3, #1
 8006770:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	613b      	str	r3, [r7, #16]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800678e:	697b      	ldr	r3, [r7, #20]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20000a04 	.word	0x20000a04
 800679c:	08007654 	.word	0x08007654
 80067a0:	080068c5 	.word	0x080068c5
 80067a4:	20000a08 	.word	0x20000a08

080067a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	623b      	str	r3, [r7, #32]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067d6:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <xTimerGenericCommand+0x98>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02a      	beq.n	8006834 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b05      	cmp	r3, #5
 80067ee:	dc18      	bgt.n	8006822 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067f0:	f7ff fd92 	bl	8006318 <xTaskGetSchedulerState>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d109      	bne.n	800680e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067fa:	4b11      	ldr	r3, [pc, #68]	; (8006840 <xTimerGenericCommand+0x98>)
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	f107 0110 	add.w	r1, r7, #16
 8006802:	2300      	movs	r3, #0
 8006804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006806:	f7fd fffb 	bl	8004800 <xQueueGenericSend>
 800680a:	6278      	str	r0, [r7, #36]	; 0x24
 800680c:	e012      	b.n	8006834 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <xTimerGenericCommand+0x98>)
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f107 0110 	add.w	r1, r7, #16
 8006816:	2300      	movs	r3, #0
 8006818:	2200      	movs	r2, #0
 800681a:	f7fd fff1 	bl	8004800 <xQueueGenericSend>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24
 8006820:	e008      	b.n	8006834 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006822:	4b07      	ldr	r3, [pc, #28]	; (8006840 <xTimerGenericCommand+0x98>)
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	f107 0110 	add.w	r1, r7, #16
 800682a:	2300      	movs	r3, #0
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	f7fe f8e5 	bl	80049fc <xQueueGenericSendFromISR>
 8006832:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006836:	4618      	mov	r0, r3
 8006838:	3728      	adds	r7, #40	; 0x28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000a04 	.word	0x20000a04

08006844 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <prvProcessExpiredTimer+0x7c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	3304      	adds	r3, #4
 800685c:	4618      	mov	r0, r3
 800685e:	f7fd fdfb 	bl	8004458 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d122      	bne.n	80068b0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	18d1      	adds	r1, r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	6978      	ldr	r0, [r7, #20]
 8006878:	f000 f8c8 	bl	8006a0c <prvInsertTimerInActiveList>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d016      	beq.n	80068b0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006882:	2300      	movs	r3, #0
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	2300      	movs	r3, #0
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	2100      	movs	r1, #0
 800688c:	6978      	ldr	r0, [r7, #20]
 800688e:	f7ff ff8b 	bl	80067a8 <xTimerGenericCommand>
 8006892:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	60fb      	str	r3, [r7, #12]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	6978      	ldr	r0, [r7, #20]
 80068b6:	4798      	blx	r3
}
 80068b8:	bf00      	nop
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	200009fc 	.word	0x200009fc

080068c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068cc:	f107 0308 	add.w	r3, r7, #8
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f857 	bl	8006984 <prvGetNextExpireTime>
 80068d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4619      	mov	r1, r3
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 f803 	bl	80068e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068e2:	f000 f8d5 	bl	8006a90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068e6:	e7f1      	b.n	80068cc <prvTimerTask+0x8>

080068e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068f2:	f7ff f88d 	bl	8005a10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068f6:	f107 0308 	add.w	r3, r7, #8
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 f866 	bl	80069cc <prvSampleTimeNow>
 8006900:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d130      	bne.n	800696a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <prvProcessTimerOrBlockTask+0x3c>
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	429a      	cmp	r2, r3
 8006914:	d806      	bhi.n	8006924 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006916:	f7ff f889 	bl	8005a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ff91 	bl	8006844 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006922:	e024      	b.n	800696e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d008      	beq.n	800693c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <prvProcessTimerOrBlockTask+0x90>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800693c:	4b0f      	ldr	r3, [pc, #60]	; (800697c <prvProcessTimerOrBlockTask+0x94>)
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	4619      	mov	r1, r3
 800694a:	f7fe fd85 	bl	8005458 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800694e:	f7ff f86d 	bl	8005a2c <xTaskResumeAll>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006958:	4b09      	ldr	r3, [pc, #36]	; (8006980 <prvProcessTimerOrBlockTask+0x98>)
 800695a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	f3bf 8f6f 	isb	sy
}
 8006968:	e001      	b.n	800696e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800696a:	f7ff f85f 	bl	8005a2c <xTaskResumeAll>
}
 800696e:	bf00      	nop
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000a00 	.word	0x20000a00
 800697c:	20000a04 	.word	0x20000a04
 8006980:	e000ed04 	.word	0xe000ed04

08006984 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800698c:	4b0e      	ldr	r3, [pc, #56]	; (80069c8 <prvGetNextExpireTime+0x44>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	bf0c      	ite	eq
 8006996:	2301      	moveq	r3, #1
 8006998:	2300      	movne	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d105      	bne.n	80069b6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <prvGetNextExpireTime+0x44>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e001      	b.n	80069ba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069ba:	68fb      	ldr	r3, [r7, #12]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	200009fc 	.word	0x200009fc

080069cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069d4:	f7ff f8c8 	bl	8005b68 <xTaskGetTickCount>
 80069d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069da:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <prvSampleTimeNow+0x3c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d205      	bcs.n	80069f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069e4:	f000 f908 	bl	8006bf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e002      	b.n	80069f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069f6:	4a04      	ldr	r2, [pc, #16]	; (8006a08 <prvSampleTimeNow+0x3c>)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069fc:	68fb      	ldr	r3, [r7, #12]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20000a0c 	.word	0x20000a0c

08006a0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d812      	bhi.n	8006a58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d302      	bcc.n	8006a46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a40:	2301      	movs	r3, #1
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e01b      	b.n	8006a7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a46:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <prvInsertTimerInActiveList+0x7c>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7fd fcc9 	bl	80043e8 <vListInsert>
 8006a56:	e012      	b.n	8006a7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d206      	bcs.n	8006a6e <prvInsertTimerInActiveList+0x62>
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d302      	bcc.n	8006a6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	e007      	b.n	8006a7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a6e:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <prvInsertTimerInActiveList+0x80>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3304      	adds	r3, #4
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f7fd fcb5 	bl	80043e8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a7e:	697b      	ldr	r3, [r7, #20]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000a00 	.word	0x20000a00
 8006a8c:	200009fc 	.word	0x200009fc

08006a90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08e      	sub	sp, #56	; 0x38
 8006a94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a96:	e09d      	b.n	8006bd4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	da18      	bge.n	8006ad0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a9e:	1d3b      	adds	r3, r7, #4
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	61fb      	str	r3, [r7, #28]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ac6:	6850      	ldr	r0, [r2, #4]
 8006ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aca:	6892      	ldr	r2, [r2, #8]
 8006acc:	4611      	mov	r1, r2
 8006ace:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	db7e      	blt.n	8006bd4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fd fcb6 	bl	8004458 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006aec:	463b      	mov	r3, r7
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff ff6c 	bl	80069cc <prvSampleTimeNow>
 8006af4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d86a      	bhi.n	8006bd2 <prvProcessReceivedCommands+0x142>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <prvProcessReceivedCommands+0x74>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b2d 	.word	0x08006b2d
 8006b08:	08006b2d 	.word	0x08006b2d
 8006b0c:	08006b2d 	.word	0x08006b2d
 8006b10:	08006bd5 	.word	0x08006bd5
 8006b14:	08006b89 	.word	0x08006b89
 8006b18:	08006bc1 	.word	0x08006bc1
 8006b1c:	08006b2d 	.word	0x08006b2d
 8006b20:	08006b2d 	.word	0x08006b2d
 8006b24:	08006bd5 	.word	0x08006bd5
 8006b28:	08006b89 	.word	0x08006b89
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	18d1      	adds	r1, r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3a:	f7ff ff67 	bl	8006a0c <prvInsertTimerInActiveList>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d047      	beq.n	8006bd4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b4a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d13f      	bne.n	8006bd4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	441a      	add	r2, r3
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2300      	movs	r3, #0
 8006b62:	2100      	movs	r1, #0
 8006b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b66:	f7ff fe1f 	bl	80067a8 <xTimerGenericCommand>
 8006b6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d130      	bne.n	8006bd4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	61bb      	str	r3, [r7, #24]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	617b      	str	r3, [r7, #20]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	18d1      	adds	r1, r2, r3
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bba:	f7ff ff27 	bl	8006a0c <prvInsertTimerInActiveList>
					break;
 8006bbe:	e009      	b.n	8006bd4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bcc:	f000 fb6a 	bl	80072a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bd0:	e000      	b.n	8006bd4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006bd2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bd4:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <prvProcessReceivedCommands+0x164>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	1d39      	adds	r1, r7, #4
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe f833 	bl	8004c48 <xQueueReceive>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f47f af57 	bne.w	8006a98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006bea:	bf00      	nop
 8006bec:	bf00      	nop
 8006bee:	3730      	adds	r7, #48	; 0x30
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000a04 	.word	0x20000a04

08006bf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bfe:	e045      	b.n	8006c8c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c00:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <prvSwitchTimerLists+0xbc>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c0a:	4b2a      	ldr	r3, [pc, #168]	; (8006cb4 <prvSwitchTimerLists+0xbc>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fd fc1d 	bl	8004458 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d12e      	bne.n	8006c8c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4413      	add	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d90e      	bls.n	8006c5e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c4c:	4b19      	ldr	r3, [pc, #100]	; (8006cb4 <prvSwitchTimerLists+0xbc>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f7fd fbc6 	bl	80043e8 <vListInsert>
 8006c5c:	e016      	b.n	8006c8c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	2300      	movs	r3, #0
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	2100      	movs	r1, #0
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff fd9d 	bl	80067a8 <xTimerGenericCommand>
 8006c6e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	603b      	str	r3, [r7, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c8c:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <prvSwitchTimerLists+0xbc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1b4      	bne.n	8006c00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c96:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <prvSwitchTimerLists+0xbc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <prvSwitchTimerLists+0xc0>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <prvSwitchTimerLists+0xbc>)
 8006ca2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ca4:	4a04      	ldr	r2, [pc, #16]	; (8006cb8 <prvSwitchTimerLists+0xc0>)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6013      	str	r3, [r2, #0]
}
 8006caa:	bf00      	nop
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200009fc 	.word	0x200009fc
 8006cb8:	20000a00 	.word	0x20000a00

08006cbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006cc2:	f000 f92b 	bl	8006f1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006cc6:	4b15      	ldr	r3, [pc, #84]	; (8006d1c <prvCheckForValidListAndQueue+0x60>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d120      	bne.n	8006d10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cce:	4814      	ldr	r0, [pc, #80]	; (8006d20 <prvCheckForValidListAndQueue+0x64>)
 8006cd0:	f7fd fb3c 	bl	800434c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006cd4:	4813      	ldr	r0, [pc, #76]	; (8006d24 <prvCheckForValidListAndQueue+0x68>)
 8006cd6:	f7fd fb39 	bl	800434c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <prvCheckForValidListAndQueue+0x6c>)
 8006cdc:	4a10      	ldr	r2, [pc, #64]	; (8006d20 <prvCheckForValidListAndQueue+0x64>)
 8006cde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ce0:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <prvCheckForValidListAndQueue+0x70>)
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <prvCheckForValidListAndQueue+0x68>)
 8006ce4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <prvCheckForValidListAndQueue+0x74>)
 8006cec:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <prvCheckForValidListAndQueue+0x78>)
 8006cee:	2110      	movs	r1, #16
 8006cf0:	200a      	movs	r0, #10
 8006cf2:	f7fd fc43 	bl	800457c <xQueueGenericCreateStatic>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4a08      	ldr	r2, [pc, #32]	; (8006d1c <prvCheckForValidListAndQueue+0x60>)
 8006cfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <prvCheckForValidListAndQueue+0x60>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <prvCheckForValidListAndQueue+0x60>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	490b      	ldr	r1, [pc, #44]	; (8006d38 <prvCheckForValidListAndQueue+0x7c>)
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fb52 	bl	80053b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d10:	f000 f934 	bl	8006f7c <vPortExitCritical>
}
 8006d14:	bf00      	nop
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20000a04 	.word	0x20000a04
 8006d20:	200009d4 	.word	0x200009d4
 8006d24:	200009e8 	.word	0x200009e8
 8006d28:	200009fc 	.word	0x200009fc
 8006d2c:	20000a00 	.word	0x20000a00
 8006d30:	20000ab0 	.word	0x20000ab0
 8006d34:	20000a10 	.word	0x20000a10
 8006d38:	0800765c 	.word	0x0800765c

08006d3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3b04      	subs	r3, #4
 8006d4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3b04      	subs	r3, #4
 8006d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f023 0201 	bic.w	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3b04      	subs	r3, #4
 8006d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d6c:	4a08      	ldr	r2, [pc, #32]	; (8006d90 <pxPortInitialiseStack+0x54>)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3b14      	subs	r3, #20
 8006d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3b20      	subs	r3, #32
 8006d82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d84:	68fb      	ldr	r3, [r7, #12]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr
 8006d90:	08006d95 	.word	0x08006d95

08006d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d9e:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <prvTaskExitError+0x54>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d00a      	beq.n	8006dbe <prvTaskExitError+0x2a>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	60fb      	str	r3, [r7, #12]
}
 8006dba:	bf00      	nop
 8006dbc:	e7fe      	b.n	8006dbc <prvTaskExitError+0x28>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	60bb      	str	r3, [r7, #8]
}
 8006dd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006dd2:	bf00      	nop
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0fc      	beq.n	8006dd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dda:	bf00      	nop
 8006ddc:	bf00      	nop
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000010 	.word	0x20000010
 8006dec:	00000000 	.word	0x00000000

08006df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <pxCurrentTCBConst2>)
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	6808      	ldr	r0, [r1, #0]
 8006df6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006dfa:	f380 8809 	msr	PSP, r0
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f04f 0000 	mov.w	r0, #0
 8006e06:	f380 8811 	msr	BASEPRI, r0
 8006e0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006e0e:	4770      	bx	lr

08006e10 <pxCurrentTCBConst2>:
 8006e10:	200004d4 	.word	0x200004d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop

08006e18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006e18:	4806      	ldr	r0, [pc, #24]	; (8006e34 <prvPortStartFirstTask+0x1c>)
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	6800      	ldr	r0, [r0, #0]
 8006e1e:	f380 8808 	msr	MSP, r0
 8006e22:	b662      	cpsie	i
 8006e24:	b661      	cpsie	f
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	df00      	svc	0
 8006e30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e32:	bf00      	nop
 8006e34:	e000ed08 	.word	0xe000ed08

08006e38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e3e:	4b32      	ldr	r3, [pc, #200]	; (8006f08 <xPortStartScheduler+0xd0>)
 8006e40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	22ff      	movs	r2, #255	; 0xff
 8006e4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	4b2a      	ldr	r3, [pc, #168]	; (8006f0c <xPortStartScheduler+0xd4>)
 8006e64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e66:	4b2a      	ldr	r3, [pc, #168]	; (8006f10 <xPortStartScheduler+0xd8>)
 8006e68:	2207      	movs	r2, #7
 8006e6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e6c:	e009      	b.n	8006e82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006e6e:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <xPortStartScheduler+0xd8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	4a26      	ldr	r2, [pc, #152]	; (8006f10 <xPortStartScheduler+0xd8>)
 8006e76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b80      	cmp	r3, #128	; 0x80
 8006e8c:	d0ef      	beq.n	8006e6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e8e:	4b20      	ldr	r3, [pc, #128]	; (8006f10 <xPortStartScheduler+0xd8>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1c3 0307 	rsb	r3, r3, #7
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d00a      	beq.n	8006eb0 <xPortStartScheduler+0x78>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	60bb      	str	r3, [r7, #8]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006eb0:	4b17      	ldr	r3, [pc, #92]	; (8006f10 <xPortStartScheduler+0xd8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	4a16      	ldr	r2, [pc, #88]	; (8006f10 <xPortStartScheduler+0xd8>)
 8006eb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006eba:	4b15      	ldr	r3, [pc, #84]	; (8006f10 <xPortStartScheduler+0xd8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ec2:	4a13      	ldr	r2, [pc, #76]	; (8006f10 <xPortStartScheduler+0xd8>)
 8006ec4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <xPortStartScheduler+0xdc>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a10      	ldr	r2, [pc, #64]	; (8006f14 <xPortStartScheduler+0xdc>)
 8006ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ed8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006eda:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <xPortStartScheduler+0xdc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a0d      	ldr	r2, [pc, #52]	; (8006f14 <xPortStartScheduler+0xdc>)
 8006ee0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ee4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ee6:	f000 f8b9 	bl	800705c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <xPortStartScheduler+0xe0>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ef0:	f7ff ff92 	bl	8006e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ef4:	f7fe ff04 	bl	8005d00 <vTaskSwitchContext>
	prvTaskExitError();
 8006ef8:	f7ff ff4c 	bl	8006d94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	e000e400 	.word	0xe000e400
 8006f0c:	20000b00 	.word	0x20000b00
 8006f10:	20000b04 	.word	0x20000b04
 8006f14:	e000ed20 	.word	0xe000ed20
 8006f18:	20000010 	.word	0x20000010

08006f1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	607b      	str	r3, [r7, #4]
}
 8006f34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <vPortEnterCritical+0x58>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	4a0d      	ldr	r2, [pc, #52]	; (8006f74 <vPortEnterCritical+0x58>)
 8006f3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f40:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <vPortEnterCritical+0x58>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d10f      	bne.n	8006f68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <vPortEnterCritical+0x5c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	603b      	str	r3, [r7, #0]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <vPortEnterCritical+0x4a>
	}
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000010 	.word	0x20000010
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f82:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <vPortExitCritical+0x4c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <vPortExitCritical+0x24>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	607b      	str	r3, [r7, #4]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fa0:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <vPortExitCritical+0x4c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <vPortExitCritical+0x4c>)
 8006fa8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006faa:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <vPortExitCritical+0x4c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d105      	bne.n	8006fbe <vPortExitCritical+0x42>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	f383 8811 	msr	BASEPRI, r3
}
 8006fbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr
 8006fc8:	20000010 	.word	0x20000010
 8006fcc:	00000000 	.word	0x00000000

08006fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fd0:	f3ef 8009 	mrs	r0, PSP
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <pxCurrentTCBConst>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fe0:	6010      	str	r0, [r2, #0]
 8006fe2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006fe6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fea:	f380 8811 	msr	BASEPRI, r0
 8006fee:	f7fe fe87 	bl	8005d00 <vTaskSwitchContext>
 8006ff2:	f04f 0000 	mov.w	r0, #0
 8006ff6:	f380 8811 	msr	BASEPRI, r0
 8006ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	6808      	ldr	r0, [r1, #0]
 8007002:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007006:	f380 8809 	msr	PSP, r0
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	4770      	bx	lr

08007010 <pxCurrentTCBConst>:
 8007010:	200004d4 	.word	0x200004d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop

08007018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	607b      	str	r3, [r7, #4]
}
 8007030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007032:	f7fe fda7 	bl	8005b84 <xTaskIncrementTick>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <xPortSysTickHandler+0x40>)
 800703e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	2300      	movs	r3, #0
 8007046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	f383 8811 	msr	BASEPRI, r3
}
 800704e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	e000ed04 	.word	0xe000ed04

0800705c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <vPortSetupTimerInterrupt+0x30>)
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007066:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <vPortSetupTimerInterrupt+0x34>)
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800706c:	4b09      	ldr	r3, [pc, #36]	; (8007094 <vPortSetupTimerInterrupt+0x38>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a09      	ldr	r2, [pc, #36]	; (8007098 <vPortSetupTimerInterrupt+0x3c>)
 8007072:	fba2 2303 	umull	r2, r3, r2, r3
 8007076:	099b      	lsrs	r3, r3, #6
 8007078:	4a08      	ldr	r2, [pc, #32]	; (800709c <vPortSetupTimerInterrupt+0x40>)
 800707a:	3b01      	subs	r3, #1
 800707c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800707e:	4b03      	ldr	r3, [pc, #12]	; (800708c <vPortSetupTimerInterrupt+0x30>)
 8007080:	2207      	movs	r2, #7
 8007082:	601a      	str	r2, [r3, #0]
}
 8007084:	bf00      	nop
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr
 800708c:	e000e010 	.word	0xe000e010
 8007090:	e000e018 	.word	0xe000e018
 8007094:	20000004 	.word	0x20000004
 8007098:	10624dd3 	.word	0x10624dd3
 800709c:	e000e014 	.word	0xe000e014

080070a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070a6:	f3ef 8305 	mrs	r3, IPSR
 80070aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b0f      	cmp	r3, #15
 80070b0:	d914      	bls.n	80070dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070b2:	4a16      	ldr	r2, [pc, #88]	; (800710c <vPortValidateInterruptPriority+0x6c>)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070bc:	4b14      	ldr	r3, [pc, #80]	; (8007110 <vPortValidateInterruptPriority+0x70>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	7afa      	ldrb	r2, [r7, #11]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d20a      	bcs.n	80070dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	607b      	str	r3, [r7, #4]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <vPortValidateInterruptPriority+0x74>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <vPortValidateInterruptPriority+0x78>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d90a      	bls.n	8007102 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	603b      	str	r3, [r7, #0]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <vPortValidateInterruptPriority+0x60>
	}
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr
 800710c:	e000e3f0 	.word	0xe000e3f0
 8007110:	20000b00 	.word	0x20000b00
 8007114:	e000ed0c 	.word	0xe000ed0c
 8007118:	20000b04 	.word	0x20000b04

0800711c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007128:	f7fe fc72 	bl	8005a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800712c:	4b58      	ldr	r3, [pc, #352]	; (8007290 <pvPortMalloc+0x174>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007134:	f000 f910 	bl	8007358 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007138:	4b56      	ldr	r3, [pc, #344]	; (8007294 <pvPortMalloc+0x178>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 808e 	bne.w	8007262 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01d      	beq.n	8007188 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800714c:	2208      	movs	r2, #8
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	2b00      	cmp	r3, #0
 800715c:	d014      	beq.n	8007188 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f023 0307 	bic.w	r3, r3, #7
 8007164:	3308      	adds	r3, #8
 8007166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <pvPortMalloc+0x6c>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	617b      	str	r3, [r7, #20]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d069      	beq.n	8007262 <pvPortMalloc+0x146>
 800718e:	4b42      	ldr	r3, [pc, #264]	; (8007298 <pvPortMalloc+0x17c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d864      	bhi.n	8007262 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007198:	4b40      	ldr	r3, [pc, #256]	; (800729c <pvPortMalloc+0x180>)
 800719a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800719c:	4b3f      	ldr	r3, [pc, #252]	; (800729c <pvPortMalloc+0x180>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071a2:	e004      	b.n	80071ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d903      	bls.n	80071c0 <pvPortMalloc+0xa4>
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f1      	bne.n	80071a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071c0:	4b33      	ldr	r3, [pc, #204]	; (8007290 <pvPortMalloc+0x174>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d04b      	beq.n	8007262 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2208      	movs	r2, #8
 80071d0:	4413      	add	r3, r2
 80071d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	1ad2      	subs	r2, r2, r3
 80071e4:	2308      	movs	r3, #8
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d91f      	bls.n	800722c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4413      	add	r3, r2
 80071f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <pvPortMalloc+0xf8>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	613b      	str	r3, [r7, #16]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	1ad2      	subs	r2, r2, r3
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007226:	69b8      	ldr	r0, [r7, #24]
 8007228:	f000 f8f8 	bl	800741c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800722c:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <pvPortMalloc+0x17c>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	4a18      	ldr	r2, [pc, #96]	; (8007298 <pvPortMalloc+0x17c>)
 8007238:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800723a:	4b17      	ldr	r3, [pc, #92]	; (8007298 <pvPortMalloc+0x17c>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b18      	ldr	r3, [pc, #96]	; (80072a0 <pvPortMalloc+0x184>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d203      	bcs.n	800724e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <pvPortMalloc+0x17c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a15      	ldr	r2, [pc, #84]	; (80072a0 <pvPortMalloc+0x184>)
 800724c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <pvPortMalloc+0x178>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	431a      	orrs	r2, r3
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007262:	f7fe fbe3 	bl	8005a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <pvPortMalloc+0x16a>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <pvPortMalloc+0x168>
	return pvReturn;
 8007286:	69fb      	ldr	r3, [r7, #28]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3728      	adds	r7, #40	; 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20001af8 	.word	0x20001af8
 8007294:	20001b04 	.word	0x20001b04
 8007298:	20001afc 	.word	0x20001afc
 800729c:	20001af0 	.word	0x20001af0
 80072a0:	20001b00 	.word	0x20001b00

080072a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d048      	beq.n	8007348 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072b6:	2308      	movs	r3, #8
 80072b8:	425b      	negs	r3, r3
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4413      	add	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	4b21      	ldr	r3, [pc, #132]	; (8007350 <vPortFree+0xac>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <vPortFree+0x44>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60fb      	str	r3, [r7, #12]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <vPortFree+0x62>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60bb      	str	r3, [r7, #8]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	4b11      	ldr	r3, [pc, #68]	; (8007350 <vPortFree+0xac>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4013      	ands	r3, r2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d019      	beq.n	8007348 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d115      	bne.n	8007348 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <vPortFree+0xac>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	43db      	mvns	r3, r3
 8007326:	401a      	ands	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800732c:	f7fe fb70 	bl	8005a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	4b07      	ldr	r3, [pc, #28]	; (8007354 <vPortFree+0xb0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4413      	add	r3, r2
 800733a:	4a06      	ldr	r2, [pc, #24]	; (8007354 <vPortFree+0xb0>)
 800733c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800733e:	6938      	ldr	r0, [r7, #16]
 8007340:	f000 f86c 	bl	800741c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007344:	f7fe fb72 	bl	8005a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007348:	bf00      	nop
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20001b04 	.word	0x20001b04
 8007354:	20001afc 	.word	0x20001afc

08007358 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800735e:	f640 73e8 	movw	r3, #4072	; 0xfe8
 8007362:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007364:	4b27      	ldr	r3, [pc, #156]	; (8007404 <prvHeapInit+0xac>)
 8007366:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00c      	beq.n	800738c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3307      	adds	r3, #7
 8007376:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0307 	bic.w	r3, r3, #7
 800737e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <prvHeapInit+0xac>)
 8007388:	4413      	add	r3, r2
 800738a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007390:	4a1d      	ldr	r2, [pc, #116]	; (8007408 <prvHeapInit+0xb0>)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007396:	4b1c      	ldr	r3, [pc, #112]	; (8007408 <prvHeapInit+0xb0>)
 8007398:	2200      	movs	r2, #0
 800739a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	4413      	add	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073a4:	2208      	movs	r2, #8
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0307 	bic.w	r3, r3, #7
 80073b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4a15      	ldr	r2, [pc, #84]	; (800740c <prvHeapInit+0xb4>)
 80073b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073ba:	4b14      	ldr	r3, [pc, #80]	; (800740c <prvHeapInit+0xb4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2200      	movs	r2, #0
 80073c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073c2:	4b12      	ldr	r3, [pc, #72]	; (800740c <prvHeapInit+0xb4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	1ad2      	subs	r2, r2, r3
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <prvHeapInit+0xb4>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <prvHeapInit+0xb8>)
 80073e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	4a09      	ldr	r2, [pc, #36]	; (8007414 <prvHeapInit+0xbc>)
 80073ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073f0:	4b09      	ldr	r3, [pc, #36]	; (8007418 <prvHeapInit+0xc0>)
 80073f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073f6:	601a      	str	r2, [r3, #0]
}
 80073f8:	bf00      	nop
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000b08 	.word	0x20000b08
 8007408:	20001af0 	.word	0x20001af0
 800740c:	20001af8 	.word	0x20001af8
 8007410:	20001b00 	.word	0x20001b00
 8007414:	20001afc 	.word	0x20001afc
 8007418:	20001b04 	.word	0x20001b04

0800741c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007424:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <prvInsertBlockIntoFreeList+0xa8>)
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e002      	b.n	8007430 <prvInsertBlockIntoFreeList+0x14>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	429a      	cmp	r2, r3
 8007438:	d8f7      	bhi.n	800742a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	4413      	add	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	429a      	cmp	r2, r3
 800744a:	d108      	bne.n	800745e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	441a      	add	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	441a      	add	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d118      	bne.n	80074a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <prvInsertBlockIntoFreeList+0xac>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d00d      	beq.n	800749a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	441a      	add	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e008      	b.n	80074ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800749a:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <prvInsertBlockIntoFreeList+0xac>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	e003      	b.n	80074ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d002      	beq.n	80074ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ba:	bf00      	nop
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr
 80074c4:	20001af0 	.word	0x20001af0
 80074c8:	20001af8 	.word	0x20001af8

080074cc <memset>:
 80074cc:	4603      	mov	r3, r0
 80074ce:	4402      	add	r2, r0
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d100      	bne.n	80074d6 <memset+0xa>
 80074d4:	4770      	bx	lr
 80074d6:	f803 1b01 	strb.w	r1, [r3], #1
 80074da:	e7f9      	b.n	80074d0 <memset+0x4>

080074dc <__libc_init_array>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	2600      	movs	r6, #0
 80074e0:	4d0c      	ldr	r5, [pc, #48]	; (8007514 <__libc_init_array+0x38>)
 80074e2:	4c0d      	ldr	r4, [pc, #52]	; (8007518 <__libc_init_array+0x3c>)
 80074e4:	1b64      	subs	r4, r4, r5
 80074e6:	10a4      	asrs	r4, r4, #2
 80074e8:	42a6      	cmp	r6, r4
 80074ea:	d109      	bne.n	8007500 <__libc_init_array+0x24>
 80074ec:	f000 f828 	bl	8007540 <_init>
 80074f0:	2600      	movs	r6, #0
 80074f2:	4d0a      	ldr	r5, [pc, #40]	; (800751c <__libc_init_array+0x40>)
 80074f4:	4c0a      	ldr	r4, [pc, #40]	; (8007520 <__libc_init_array+0x44>)
 80074f6:	1b64      	subs	r4, r4, r5
 80074f8:	10a4      	asrs	r4, r4, #2
 80074fa:	42a6      	cmp	r6, r4
 80074fc:	d105      	bne.n	800750a <__libc_init_array+0x2e>
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	f855 3b04 	ldr.w	r3, [r5], #4
 8007504:	4798      	blx	r3
 8007506:	3601      	adds	r6, #1
 8007508:	e7ee      	b.n	80074e8 <__libc_init_array+0xc>
 800750a:	f855 3b04 	ldr.w	r3, [r5], #4
 800750e:	4798      	blx	r3
 8007510:	3601      	adds	r6, #1
 8007512:	e7f2      	b.n	80074fa <__libc_init_array+0x1e>
 8007514:	080077a4 	.word	0x080077a4
 8007518:	080077a4 	.word	0x080077a4
 800751c:	080077a4 	.word	0x080077a4
 8007520:	080077a8 	.word	0x080077a8

08007524 <memcpy>:
 8007524:	440a      	add	r2, r1
 8007526:	4291      	cmp	r1, r2
 8007528:	f100 33ff 	add.w	r3, r0, #4294967295
 800752c:	d100      	bne.n	8007530 <memcpy+0xc>
 800752e:	4770      	bx	lr
 8007530:	b510      	push	{r4, lr}
 8007532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007536:	4291      	cmp	r1, r2
 8007538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800753c:	d1f9      	bne.n	8007532 <memcpy+0xe>
 800753e:	bd10      	pop	{r4, pc}

08007540 <_init>:
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007542:	bf00      	nop
 8007544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007546:	bc08      	pop	{r3}
 8007548:	469e      	mov	lr, r3
 800754a:	4770      	bx	lr

0800754c <_fini>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	bf00      	nop
 8007550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007552:	bc08      	pop	{r3}
 8007554:	469e      	mov	lr, r3
 8007556:	4770      	bx	lr
